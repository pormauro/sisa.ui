Folder: C:\Users\porma\Desktop\sisa.ui\app
File: ConfigScreen.js
Content:
// app/config.js (o app/config/index.js)

import React, { useEffect, useState } from 'react';
import {
  View,
  Text,
  StyleSheet,
  ScrollView,
  Button,
  Alert,
  TextInput,
  TouchableOpacity,
} from 'react-native';
import AsyncStorage from '@react-native-async-storage/async-storage';
import { useRouter } from 'expo-router';
import { BASE_URL } from '../src/config/index';

export default function ConfigScreen() {
  const router = useRouter();

  const [userId, setUserId] = useState(null);

  // Datos de configuraciÃ³n
  const [configDetails, setConfigDetails] = useState(null);

  // Modo ediciÃ³n
  const [editConfig, setEditConfig] = useState(false);

  // Formulario
  const [configForm, setConfigForm] = useState({
    role: '',
    view_type: '',
    theme: '',
    font_size: '',
  });

  // Cargar userId de AsyncStorage
  useEffect(() => {
    const loadUserData = async () => {
      try {
        const storedUserId = await AsyncStorage.getItem('user_id');
        if (storedUserId) setUserId(storedUserId);
      } catch (error) {
        console.log('Error al cargar user_id:', error);
      }
    };
    loadUserData();
  }, []);

  // Cargar configuraciÃ³n
  const loadConfig = async () => {
    if (!userId) return;
    const token = await AsyncStorage.getItem('token');
    if (!token) return;

    try {
      const configResponse = await fetch(
        `${BASE_URL}/user_configurations/${userId}`,
        { headers: { Authorization: `Bearer ${token}` } }
      );
      if (configResponse.ok) {
        const configData = await configResponse.json();
        const configuration = configData.configuration;
        setConfigDetails(configuration);
        setConfigForm({
          role: configuration.role || '',
          view_type: configuration.view_type || '',
          theme: configuration.theme || '',
          font_size: configuration.font_size || '',
        });
      } else {
        console.error('Error al obtener la configuraciÃ³n');
      }
    } catch (error) {
      console.error('Error en fetch de configuraciÃ³n:', error);
    }
  };

  useEffect(() => {
    loadConfig();
  }, [userId]);

  // Guardar cambios en configuraciÃ³n (PUT)
  const handleConfigSave = async () => {
    const token = await AsyncStorage.getItem('token');
    if (!token) return;
    try {
      const response = await fetch(`${BASE_URL}/user_configurations`, {
        method: 'PUT',
        headers: {
          Authorization: `Bearer ${token}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          role: configForm.role,
          view_type: configForm.view_type,
          theme: configForm.theme,
          font_size: configForm.font_size,
        }),
      });
      if (response.ok) {
        setConfigDetails({ ...configDetails, ...configForm });
        setEditConfig(false);
      } else {
        const errData = await response.json();
        Alert.alert('Error', errData.error || 'Error actualizando configuraciÃ³n');
      }
    } catch (error) {
      Alert.alert('Error', error.message);
    }
  };

  return (
    <ScrollView style={styles.container}>
      <Text style={styles.subtitle}>ConfiguraciÃ³n</Text>

      {configDetails ? (
        <View style={styles.dataContainer}>
          {editConfig ? (
            <>
              <TextInput
                style={styles.input}
                value={configForm.role}
                onChangeText={(text) => setConfigForm({ ...configForm, role: text })}
                placeholder="Rol"
              />
              <TextInput
                style={styles.input}
                value={configForm.view_type}
                onChangeText={(text) => setConfigForm({ ...configForm, view_type: text })}
                placeholder="Tipo de vista"
              />
              <TextInput
                style={styles.input}
                value={configForm.theme}
                onChangeText={(text) => setConfigForm({ ...configForm, theme: text })}
                placeholder="Tema"
              />
              <TextInput
                style={styles.input}
                value={configForm.font_size}
                onChangeText={(text) => setConfigForm({ ...configForm, font_size: text })}
                placeholder="TamaÃ±o de fuente"
              />
              <Button title="Guardar ConfiguraciÃ³n" onPress={handleConfigSave} />
            </>
          ) : (
            <>
              <Text style={styles.infoText}>Rol: {configDetails.role}</Text>
              <Text style={styles.infoText}>Tipo de vista: {configDetails.view_type}</Text>
              <Text style={styles.infoText}>Tema: {configDetails.theme}</Text>
              <Text style={styles.infoText}>TamaÃ±o de fuente: {configDetails.font_size}</Text>

              <TouchableOpacity
                style={styles.editButton}
                onPress={() => setEditConfig(true)}
              >
                <Text style={styles.editButtonText}>Editar ConfiguraciÃ³n</Text>
              </TouchableOpacity>
            </>
          )}
        </View>
      ) : (
        <Text style={styles.infoText}>Cargando configuraciÃ³n...</Text>
      )}

    </ScrollView>
  );
}

const styles = StyleSheet.create({
  container: { flex: 1, padding: 20 },
  subtitle: {
    fontSize: 22,
    fontWeight: 'bold',
    marginBottom: 10,
  },
  dataContainer: {
    backgroundColor: '#f5f5f5',
    padding: 15,
    borderRadius: 10,
    marginBottom: 20,
    justifyContent: 'center',
  },
  infoText: { fontSize: 18, marginVertical: 5 },
  input: {
    borderWidth: 1,
    padding: 10,
    marginVertical: 8,
    borderRadius: 5,
    fontSize: 16,
    backgroundColor: '#fff',
  },
  editButton: {
    backgroundColor: '#007BFF',
    borderRadius: 10,
    padding: 15,
    marginTop: 10,
    alignItems: 'center',
  },
  editButtonText: {
    color: '#fff',
    fontSize: 18,
  },
});

---
Folder: C:\Users\porma\Desktop\sisa.ui\app
File: ErrorLogsList.js
Content:
// src/screens/ErrorLogsList.js
import React, { useEffect, useState } from 'react';
import { 
  View, 
  Text, 
  FlatList, 
  StyleSheet, 
  ActivityIndicator, 
  TouchableOpacity 
} from 'react-native';
import { getErrorLogs, clearErrorLogs } from '../src/database/errorLogger';

export default function ErrorLogsList() {
  const [logs, setLogs] = useState([]);
  const [loading, setLoading] = useState(true);

  const loadLogs = async () => {
    setLoading(true);
    try {
      const fetchedLogs = await getErrorLogs();
      setLogs(fetchedLogs);
    } catch (error) {
      console.error('Error loading logs:', error);
    } finally {
      setLoading(false);
    }
  };

  // FunciÃ³n para limpiar todos los logs y recargar la lista
  const handleClearLogs = async () => {
    await clearErrorLogs();
    loadLogs();
  };

  useEffect(() => {
    loadLogs();
  }, []);

  const renderItem = ({ item }) => (
    <View style={styles.logItem}>
      <Text style={styles.timestamp}>{item.timestamp}</Text>
      <Text style={styles.errorMessage}>{item.error_message}</Text>
      {item.error_stack ? <Text style={styles.errorStack}>{item.error_stack}</Text> : null}
    </View>
  );

  return (
    <View style={styles.container}>
      <Text style={styles.title}>Error Logs</Text>
      <TouchableOpacity style={styles.clearButton} onPress={handleClearLogs}>
        <Text style={styles.clearButtonText}>Limpiar logs</Text>
      </TouchableOpacity>
      {loading ? (
        <ActivityIndicator size="large" color="#007BFF" style={styles.loader} />
      ) : (
        <FlatList
          data={logs}
          keyExtractor={(item) => item.id.toString()}
          renderItem={renderItem}
          ListEmptyComponent={<Text>No hay registros de errores.</Text>}
        />
      )}
    </View>
  );
}

const styles = StyleSheet.create({
  container: { 
    flex: 1, 
    padding: 16, 
    backgroundColor: '#fff',
  },
  title: {
    fontSize: 22,
    fontWeight: 'bold',
    marginBottom: 16,
  },
  clearButton: {
    backgroundColor: '#007BFF',
    paddingVertical: 8,
    paddingHorizontal: 16,
    borderRadius: 4,
    alignSelf: 'flex-start',
    marginBottom: 16,
  },
  clearButtonText: {
    color: '#fff',
    fontSize: 16,
  },
  loader: { 
    marginTop: 20,
  },
  logItem: {
    borderBottomWidth: 1,
    borderBottomColor: '#ccc',
    paddingVertical: 8,
    marginBottom: 8,
  },
  timestamp: {
    fontSize: 12,
    color: '#666',
  },
  errorMessage: {
    fontSize: 16,
    color: '#c00',
    marginTop: 4,
  },
  errorStack: {
    fontSize: 12,
    color: '#999',
    marginTop: 2,
  },
});

---
Folder: C:\Users\porma\Desktop\sisa.ui\app
File: home.js
Content:
import React from 'react';
import { View, Text, StyleSheet, TouchableOpacity, ScrollView } from 'react-native';
import { useRouter } from 'expo-router';

export default function Menu () {
  const router = useRouter();

  // Define las secciones del sistema; en este ejemplo "Perfil y ConfiguraciÃ³n" es una sola secciÃ³n.
  const menuItems = [
    { title: 'Errors', route: './ErrorLogsList' },
    { title: 'Clientes', route: './clients/ClientsScreen' },
    { title: 'Productos / Servicios', route: './products_services/ProductsServicesScreen' },
    { title: 'Carpetas', route: './folders/AppNavigator' },
    { title: 'Trabajos', route: './jobs/JobsScreen' },
    { title: 'Ventas', route: './sales' },
    { title: 'Gastos', route: './expenses' },
    { title: 'Citas', route: './appointments' },
    { title: 'Notificaciones', route: './notifications' },
    { title: 'Cajas', route: './cash_boxes/CashBoxesScreen' },
    { title: 'Cierres Contables', route: './accounting_closings' },
    { title: 'Perfil', route: './ProfileScreen' },
    { title: 'ConfiguraciÃ³n', route: './ConfigScreen' },
  ];

  return (
    <ScrollView style={styles.container}>
      <Text style={styles.title}>MenÃº Principal</Text>
      {menuItems.map((item, index) => (
        <TouchableOpacity
          key={index}
          style={styles.menuItem}
          onPress={() => router.push(item.route)}
        >
          <Text style={styles.menuText}>{item.title}</Text>
        </TouchableOpacity>
      ))}
    </ScrollView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    padding: 20,
    backgroundColor: '#f2f2f2'
  },
  title: {
    fontSize: 28,
    fontWeight: 'bold',
    marginBottom: 20,
    textAlign: 'center'
  },
  menuItem: {
    backgroundColor: '#007BFF',
    paddingVertical: 15,
    paddingHorizontal: 10,
    borderRadius: 10,
    marginBottom: 10,
    alignItems: 'center'
  },
  menuText: {
    color: 'white',
    fontSize: 18,
  }
});

---
Folder: C:\Users\porma\Desktop\sisa.ui\app
File: index.js
Content:
import React, { useEffect } from 'react';
import { View, Text, StyleSheet, Image, Linking, TouchableOpacity } from 'react-native';
import { useRouter } from 'expo-router';
import AsyncStorage from '@react-native-async-storage/async-storage';
import logo from '../assets/images/logo.png';
// <-- IMPORTAMOS BASE_URL
import { BASE_URL } from '../src/config/index';




export default function SplashScreen() {
  const router = useRouter();

  useEffect(() => {
    const checkProfile = async () => {
      const token = await AsyncStorage.getItem('token');
      if (token) {
        try {
          // USAMOS BASE_URL
          const response = await fetch(`${BASE_URL}/profile`, {
            method: 'GET',
            headers: {
              'Authorization': `Bearer ${token}`,
              'Content-Type': 'application/json',
            },
          });

          if (response.ok) {
            const data = await response.json();
            // Extraemos los datos del usuario
            const { id, username, email } = data.user;
            // Guardamos en AsyncStorage
            await AsyncStorage.setItem('user_id', id.toString());
            await AsyncStorage.setItem('username', username);
            await AsyncStorage.setItem('email', email);

            router.replace('./home');
          } else {
            await AsyncStorage.removeItem('token');
            router.replace('./login/login');
          }
        } catch (error) {
          console.log('Error:', error);
          await AsyncStorage.removeItem('token');
          router.replace('./login/login');
        }
      } else {
        router.replace('./login/login');
      }
    };

    setTimeout(checkProfile, 1000);
  }, []);

  return (
    <View style={styles.container}>
      <Text style={styles.title}>Sistema de GestiÃ³n</Text>
      <Image source={logo} style={styles.logo} />

      <TouchableOpacity onPress={() => Linking.openURL('https://www.privacypolicies.com/live/a987d28b-ea26-4d75-97fb-3518c54598b0')}>
        <Text style={{ color: 'blue' }}>PolÃ­tica de Privacidad</Text>
      </TouchableOpacity>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#2f273e', // Color de fondo
    justifyContent: 'center',
    alignItems: 'center',
  },
  title: { 
    fontSize: 24, 
    fontWeight: 'bold', 
    marginBottom: 20,
    color:'#ffffff'
  },
  logo: {
    width: '90%',
    resizeMode: 'contain',
  },
});
---
Folder: C:\Users\porma\Desktop\sisa.ui\app
File: ProfileScreen.js
Content:
// app/profile.js (o app/profile/index.js)

import React, { useEffect, useState } from 'react';
import {
  View,
  Text,
  StyleSheet,
  ScrollView,
  Button,
  Alert,
  TextInput,
  TouchableOpacity,
} from 'react-native';
import AsyncStorage from '@react-native-async-storage/async-storage';
import { useRouter } from 'expo-router';
import { BASE_URL } from '../src/config/index';

import CircleImagePicker from '../src/components/CircleImagePicker';

export default function ProfileScreen() {
  const router = useRouter();

  // Datos bÃ¡sicos del usuario
  const [userData, setUserData] = useState({
    user_id: null,
    username: null,
    email: null,
  });

  // Datos de perfil
  const [profileDetails, setProfileDetails] = useState(null);

  // Modo ediciÃ³n
  const [editProfile, setEditProfile] = useState(false);

  // Formulario para editar
  const [profileForm, setProfileForm] = useState({
    full_name: '',
    phone: '',
    address: '',
    cuit: '',
    profile_file_id: '',
  });

  // Cargar datos bÃ¡sicos (user_id, username, email) de AsyncStorage
  useEffect(() => {
    const loadUserData = async () => {
      try {
        const user_id = await AsyncStorage.getItem('user_id');
        const username = await AsyncStorage.getItem('username');
        const email = await AsyncStorage.getItem('email');
        setUserData({ user_id, username, email });
      } catch (error) {
        console.log('Error al cargar datos del usuario:', error);
      }
    };
    loadUserData();
  }, []);

  // Cargar perfil desde la API
  const loadProfile = async () => {
    if (!userData.user_id) return;
    const token = await AsyncStorage.getItem('token');
    if (!token) return;

    try {
      const profileResponse = await fetch(
        `${BASE_URL}/user_profile/${userData.user_id}`,
        { headers: { Authorization: `Bearer ${token}` } }
      );
      if (profileResponse.ok) {
        const profileData = await profileResponse.json();
        const profile = profileData.profile;
        setProfileDetails(profile);
        // Llenamos el formulario
        setProfileForm({
          full_name: profile.full_name || '',
          phone: profile.phone || '',
          address: profile.address || '',
          cuit: profile.cuit || '',
          profile_file_id: profile.profile_file_id
            ? profile.profile_file_id.toString()
            : '',
        });
      } else {
        console.error('Error al obtener el perfil');
      }
    } catch (error) {
      console.error('Error en fetch de perfil:', error);
    }
  };

  useEffect(() => {
    loadProfile();
  }, [userData.user_id]);

  // Callback al cambiar la imagen (subir nueva foto)
  const handleImageUpdate = async (newFileId) => {
    const token = await AsyncStorage.getItem('token');
    if (!token) return;
    try {
      const updateResponse = await fetch(`${BASE_URL}/user_profile`, {
        method: 'PUT',
        headers: {
          Authorization: `Bearer ${token}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          full_name: profileForm.full_name,
          phone: profileForm.phone,
          address: profileForm.address,
          cuit: profileForm.cuit,
          profile_file_id: newFileId,
        }),
      });
      if (updateResponse.ok) {
        loadProfile(); // Recargamos datos de perfil
      } else {
        const errData = await updateResponse.json();
        Alert.alert('Error', errData.error || 'Error actualizando perfil');
      }
    } catch (error) {
      Alert.alert('Error', error.message);
    }
  };

  // Guardar cambios en perfil (PUT)
  const handleProfileSave = async () => {
    const token = await AsyncStorage.getItem('token');
    if (!token) return;
    try {
      const response = await fetch(`${BASE_URL}/user_profile`, {
        method: 'PUT',
        headers: {
          Authorization: `Bearer ${token}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          full_name: profileForm.full_name,
          phone: profileForm.phone,
          address: profileForm.address,
          cuit: profileForm.cuit,
          profile_file_id:
            profileForm.profile_file_id === ''
              ? null
              : parseInt(profileForm.profile_file_id),
        }),
      });
      if (response.ok) {
        // Actualizamos localmente
        if (profileDetails) {
          setProfileDetails({ ...profileDetails, ...profileForm });
        }
        setEditProfile(false);
      } else {
        const errData = await response.json();
        Alert.alert('Error', errData.error || 'Error actualizando perfil');
      }
    } catch (error) {
      Alert.alert('Error', error.message);
    }
  };

  // Cerrar sesiÃ³n
  const handleLogout = async () => {
    try {
      await AsyncStorage.removeItem('token');
      await AsyncStorage.removeItem('user_id');
      await AsyncStorage.removeItem('username');
      await AsyncStorage.removeItem('email');
      Alert.alert('SesiÃ³n cerrada');
      router.replace('./login/login');
    } catch (error) {
      console.log('Error al cerrar sesiÃ³n:', error);
    }
  };

  //Elimina la Cuenta
  const handleDeleteAccount = async () => {
    Alert.alert(
      'Eliminar cuenta',
      'Esta acciÃ³n es irreversible. Â¿Deseas continuar?',
      [
        { text: 'Cancelar', style: 'cancel' },
        {
          text: 'Eliminar',
          style: 'destructive',
          onPress: async () => {
            const token = await AsyncStorage.getItem('token');
            if (!token) return;
            try {
              const response = await fetch(`${BASE_URL}/users/${userData.user_id}`, {
                method: 'DELETE',
                headers: { Authorization: `Bearer ${token}` },
              });
  
              if (response.ok) {
                await AsyncStorage.clear();
                Alert.alert('Cuenta eliminada');
                router.replace('./login');
              } else {
                Alert.alert('Error', 'No se pudo eliminar la cuenta.');
              }
            } catch (error) {
              Alert.alert('Error', error.message);
            }
          },
        },
      ]
    );
  };
  

  return (
    <ScrollView style={styles.container}>
      <Text style={styles.subtitle}>Perfil</Text>

      {profileDetails ? (
        <View style={styles.dataContainer}>
          {/* Foto en cÃ­rculo editable */}
          <CircleImagePicker
            fileId={profileDetails.profile_file_id}
            editable={true}
            size={200}
            onImageChange={handleImageUpdate}
          />

          <Text style={styles.infoText}>Username: {userData.username}</Text>
          <Text style={styles.infoText}>Email: {userData.email}</Text>

          {editProfile ? (
            <>
              <TextInput
                style={styles.input}
                value={profileForm.full_name}
                onChangeText={(text) =>
                  setProfileForm({ ...profileForm, full_name: text })
                }
                placeholder="Nombre completo"
              />
              <TextInput
                style={styles.input}
                value={profileForm.phone}
                onChangeText={(text) =>
                  setProfileForm({ ...profileForm, phone: text })
                }
                placeholder="TelÃ©fono"
                keyboardType="phone-pad"
              />
              <TextInput
                style={styles.input}
                value={profileForm.address}
                onChangeText={(text) =>
                  setProfileForm({ ...profileForm, address: text })
                }
                placeholder="DirecciÃ³n"
              />
              <TextInput
                style={styles.input}
                value={profileForm.cuit}
                onChangeText={(text) =>
                  setProfileForm({ ...profileForm, cuit: text })
                }
                placeholder="CUIT"
                keyboardType="numeric"
              />

              <Button title="Guardar Perfil" onPress={handleProfileSave} />
            </>
          ) : (
            <>
              <Text style={styles.infoText}>Nombre: {profileDetails.full_name}</Text>
              <Text style={styles.infoText}>TelÃ©fono: {profileDetails.phone}</Text>
              <Text style={styles.infoText}>DirecciÃ³n: {profileDetails.address}</Text>
              <Text style={styles.infoText}>CUIT: {profileDetails.cuit}</Text>

              <TouchableOpacity
                style={styles.editButton}
                onPress={() => setEditProfile(true)}
              >
                <Text style={styles.editButtonText}>Editar Perfil</Text>
              </TouchableOpacity>
            </>
          )}
        </View>
      ) : (
        <Text style={styles.infoText}>Cargando perfil...</Text>
      )}
      <Button title="Eliminar Cuenta" onPress={handleDeleteAccount} color="red" />
      <Button title="Cerrar SesiÃ³n" onPress={handleLogout} />
    </ScrollView>
  );
}

const styles = StyleSheet.create({
  container: { flex: 1, padding: 20 },
  subtitle: {
    fontSize: 22,
    fontWeight: 'bold',
    marginBottom: 10,
  },
  dataContainer: {
    backgroundColor: '#f5f5f5',
    padding: 15,
    borderRadius: 10,
    marginBottom: 20,
    justifyContent: 'center',
  },
  infoText: { fontSize: 18, marginVertical: 5 },
  input: {
    borderWidth: 1,
    padding: 10,
    marginVertical: 8,
    borderRadius: 5,
    fontSize: 16,
    backgroundColor: '#fff',
  },
  editButton: {
    backgroundColor: '#007BFF',
    borderRadius: 10,
    padding: 15,
    marginTop: 10,
    alignItems: 'center',
  },
  editButtonText: {
    color: '#fff',
    fontSize: 18,
  },
});

---
Folder: C:\Users\porma\Desktop\sisa.ui\app
File: UserProfile.js
Content:
// UserProfile.js
import React, { useContext } from 'react';
import { View, Text, Button, StyleSheet } from 'react-native';
import { UserContext } from '../src/contexts/UserContext';

const UserProfile = () => {
  const { user, setUser } = useContext(UserContext);

  // FunciÃ³n para actualizar la informaciÃ³n del usuario
  const updateUser = () => {
    setUser({
      id: 2,
      username: 'jane_doe',
      email: 'jane@example.com',
    });
  };

  return (
    <View style={styles.container}>
      <Text style={styles.label}>Username: {user.username}</Text>
      <Text style={styles.label}>Email: {user.email}</Text>
      <Button title="Update User" onPress={updateUser} />
    </View>
  );
};

const styles = StyleSheet.create({
  container: { 
    alignItems: 'center' 
  },
  label: { 
    fontSize: 16, 
    marginBottom: 10 
  },
});

export default UserProfile;

---
Folder: C:\Users\porma\Desktop\sisa.ui\app\cash_boxes
File: AddCashBox.js
Content:
// app/cash_boxes/AddCashBox.js
import React, { useState } from 'react';
import {
  View,
  Text,
  TextInput,
  StyleSheet,
  Alert,
  Button,
  ScrollView,
  TouchableOpacity,
} from 'react-native';
import AsyncStorage from '@react-native-async-storage/async-storage';
import { useRouter } from 'expo-router';
import { BASE_URL } from '../../src/config/index';
import CircleImagePicker from '../../src/components/CircleImagePicker';

export default function AddCashBox() {
  const router = useRouter();
  const [form, setForm] = useState({
    name: '',
    image_file_id: null,
  });

  const handleImageUpdate = (newFileId) => {
    setForm({ ...form, image_file_id: newFileId });
  };

  const handleSave = async () => {
    try {
      const token = await AsyncStorage.getItem('token');
      if (!token) return;

      const response = await fetch(`${BASE_URL}/cash_boxes`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          Authorization: `Bearer ${token}`,
        },
        body: JSON.stringify(form),
      });

      if (response.ok) {
        Alert.alert('Ã‰xito', 'Caja de dinero creada');
        router.back();
      } else {
        const errData = await response.json();
        Alert.alert('Error', errData.error || 'Error al guardar');
      }
    } catch (error) {
      Alert.alert('Error', error.message);
    }
  };

  return (
    <ScrollView style={styles.container}>
      <Text style={styles.title}>Agregar Caja de Dinero</Text>

      <CircleImagePicker
        fileId={form.image_file_id}
        onImageChange={handleImageUpdate}
        editable={true}
        size={200}
      />

      <TextInput
        style={styles.input}
        placeholder="Nombre de la caja"
        value={form.name}
        onChangeText={(text) => setForm({ ...form, name: text })}
      />

      <TouchableOpacity style={styles.saveButton} onPress={handleSave}>
        <Text style={styles.saveButtonText}>Crear</Text>
      </TouchableOpacity>

      <Button title="Cancelar" onPress={() => router.back()} />
    </ScrollView>
  );
}

const styles = StyleSheet.create({
  container: { flex: 1, padding: 20, backgroundColor: '#fff' },
  title: { fontSize: 24, fontWeight: 'bold', marginBottom: 20, textAlign: 'center' },
  input: {
    borderWidth: 1,
    padding: 10,
    marginVertical: 5,
    borderRadius: 5,
    fontSize: 16,
    backgroundColor: '#fff',
  },
  saveButton: {
    backgroundColor: '#007BFF',
    padding: 15,
    borderRadius: 10,
    marginBottom: 10,
    alignItems: 'center',
  },
  saveButtonText: {
    color: '#fff',
    fontSize: 18,
    fontWeight: 'bold',
  },
});

---
Folder: C:\Users\porma\Desktop\sisa.ui\app\cash_boxes
File: CashBoxesList.js
Content:
// app/cash_boxes/CashBoxesList.js
import React, { useEffect, useState } from 'react';
import {
  View,
  Text,
  FlatList,
  StyleSheet,
  Alert,
  ActivityIndicator,
  Platform,
  UIManager,
  LayoutAnimation,
  TextInput,
} from 'react-native';
import AsyncStorage from '@react-native-async-storage/async-storage';
import Fuse from 'fuse.js';
import { useRouter } from 'expo-router';
import { BASE_URL } from '../../src/config/index';
import CashBoxItem from './CashBoxItem';

export default function CashBoxesList() {
  const router = useRouter();
  const [cashBoxes, setCashBoxes] = useState([]);
  const [filteredCashBoxes, setFilteredCashBoxes] = useState([]);
  const [loading, setLoading] = useState(true);
  const [searchQuery, setSearchQuery] = useState('');
  const [expandedItemId, setExpandedItemId] = useState(null);

  // Activar animaciones en Android
  useEffect(() => {
    if (Platform.OS === 'android') {
      UIManager.setLayoutAnimationEnabledExperimental &&
        UIManager.setLayoutAnimationEnabledExperimental(true);
    }
  }, []);

  // Cargar cajas desde la API
  const loadCashBoxes = async () => {
    setLoading(true);
    const token = await AsyncStorage.getItem('token');
    if (!token) {
      setLoading(false);
      return;
    }
    try {
      const response = await fetch(`${BASE_URL}/cash_boxes`, {
        headers: { Authorization: `Bearer ${token}` },
      });
      if (response.ok) {
        const data = await response.json();
        const allCashBoxes = data.cash_boxes || data;
        setCashBoxes(allCashBoxes);
        setFilteredCashBoxes(allCashBoxes);
      } else {
        Alert.alert('Error', 'No se pudieron obtener las cajas de dinero');
      }
    } catch (error) {
      Alert.alert('Error', error.message);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    loadCashBoxes();
  }, []);

  // Fuzzy search con Fuse (busca en el campo "name")
  useEffect(() => {
    if (searchQuery.trim() === '') {
      setFilteredCashBoxes(cashBoxes);
      return;
    }
    const options = {
      keys: ['name'],
      threshold: 0.4,
      includeScore: true,
    };
    const fuse = new Fuse(cashBoxes, options);
    const results = fuse.search(searchQuery);
    setFilteredCashBoxes(results.map(result => result.item));
  }, [searchQuery, cashBoxes]);

  const handleDelete = async (cashBoxId) => {
    const token = await AsyncStorage.getItem('token');
    if (!token) return;
    try {
      const response = await fetch(`${BASE_URL}/cash_boxes/${cashBoxId}`, {
        method: 'DELETE',
        headers: { Authorization: `Bearer ${token}` },
      });
      if (response.ok) {
        Alert.alert('Caja eliminada');
        loadCashBoxes();
        if (expandedItemId === cashBoxId) {
          setExpandedItemId(null);
        }
      } else {
        const errData = await response.json();
        Alert.alert('Error', errData.error || 'Error eliminando la caja');
      }
    } catch (error) {
      Alert.alert('Error', error.message);
    }
  };

  const handleEdit = (cashBoxId) => {
    router.push(`./EditCashBox?id=${cashBoxId}`);
  };

  const handleToggle = (cashBoxId) => {
    if (Platform.OS !== 'web' && LayoutAnimation && LayoutAnimation.configureNext) {
      LayoutAnimation.configureNext(LayoutAnimation.Presets.easeInEaseOut);
    }
    setExpandedItemId(prev => (prev === cashBoxId ? null : cashBoxId));
  };

  return (
    <View style={styles.container}>
      <TextInput
        style={styles.searchInput}
        placeholder="Buscar cajas..."
        value={searchQuery}
        onChangeText={setSearchQuery}
      />
      {loading ? (
        <ActivityIndicator size="large" color="#007BFF" style={styles.loader} />
      ) : (
        <FlatList
          data={filteredCashBoxes}
          keyExtractor={(item) => item.id.toString()}
          renderItem={({ item }) => (
            <CashBoxItem
              item={item}
              expanded={expandedItemId === item.id}
              onToggle={handleToggle}
              onDelete={handleDelete}
              onEdit={handleEdit}
            />
          )}
          contentContainerStyle={styles.listContainer}
          ListEmptyComponent={<Text>No hay cajas de dinero disponibles.</Text>}
        />
      )}
    </View>
  );
}

const styles = StyleSheet.create({
  container: { 
    flex: 1, 
    width: '100%',
    backgroundColor: '#fff',
    padding: 20,
  },
  searchInput: {
    height: 40,
    borderWidth: 1,
    borderColor: '#ccc',
    borderRadius: 8,
    paddingHorizontal: 10,
  },
  listContainer: { 
    marginTop: 20,
  },
  loader: { 
    marginTop: 20,
  },
});

---
Folder: C:\Users\porma\Desktop\sisa.ui\app\cash_boxes
File: CashBoxesScreen.js
Content:
// app/cash_boxes/CashBoxesScreen.js
import React from 'react';
import { View, Text, TouchableOpacity, StyleSheet } from 'react-native';
import { useRouter } from 'expo-router';
import CashBoxesList from './CashBoxesList';

export default function CashBoxesScreen() {
  const router = useRouter();

  const handleAddCashBox = () => {
    router.push('./AddCashBox');
  };

  return (
    <View style={styles.container}>
      <Text style={styles.title}>Cajas de Dinero</Text>
      <CashBoxesList />
      <TouchableOpacity style={styles.floatingButton} onPress={handleAddCashBox}>
        <Text style={styles.floatingButtonText}>+</Text>
      </TouchableOpacity>
    </View>
  );
}

const styles = StyleSheet.create({
  container: { 
    flex: 1, 
    backgroundColor: '#fff',
    padding: 20 
  },
  title: { 
    fontSize: 24, 
    fontWeight: 'bold', 
    marginBottom: 10,
    textAlign: 'center'
  },
  floatingButton: {
    position: 'absolute',
    bottom: 20,
    right: 20,
    backgroundColor: '#007BFF',
    width: 60,
    height: 60,
    borderRadius: 30,
    alignItems: 'center',
    justifyContent: 'center',
    elevation: 5,
    shadowColor: '#000',
    shadowOpacity: 0.3,
    shadowOffset: { width: 0, height: 2 },
    shadowRadius: 2,
  },
  floatingButtonText: {
    fontSize: 30,
    color: '#fff',
    marginTop: -4,
  },
});

---
Folder: C:\Users\porma\Desktop\sisa.ui\app\cash_boxes
File: CashBoxItem.js
Content:
// app/cash_boxes/CashBoxItem.js
import React from 'react';
import { View, Text, StyleSheet, TouchableOpacity, Alert } from 'react-native';
import CircleImagePicker from '../../src/components/CircleImagePicker';

/**
 * item: datos de la caja
 * expanded: booleano para mostrar detalles
 * onToggle, onDelete, onEdit: callbacks para acciones
 */
export default function CashBoxItem({ item, expanded, onToggle, onDelete, onEdit }) {
  const handleToggle = () => {
    onToggle(item.id);
  };

  // TamaÃ±o del avatar segÃºn estado expandido
  const avatarSize = expanded ? 80 : 50;

  return (
    <TouchableOpacity onPress={handleToggle} activeOpacity={0.8}>
      <View style={styles.itemContainer}>
        <View style={styles.headerRow}>
          <Text style={styles.boxName}>{item.name}</Text>
          <CircleImagePicker
            fileId={item.image_file_id}
            editable={false}
            size={avatarSize}
          />
        </View>
        {expanded && (
          <>
            {/* Puedes mostrar aquÃ­ mÃ¡s detalles si los tuvieras */}
            <View style={styles.buttonContainer}>
              <TouchableOpacity style={styles.button} onPress={() => onEdit(item.id)}>
                <Text style={styles.buttonText}>Editar</Text>
              </TouchableOpacity>
              <TouchableOpacity
                style={[styles.button, styles.deleteButton]}
                onPress={() =>
                  Alert.alert(
                    'Confirmar',
                    'Â¿EstÃ¡s seguro de eliminar esta caja?',
                    [
                      { text: 'Cancelar', style: 'cancel' },
                      {
                        text: 'Eliminar',
                        style: 'destructive',
                        onPress: () => onDelete(item.id),
                      },
                    ]
                  )
                }
              >
                <Text style={styles.buttonText}>Eliminar</Text>
              </TouchableOpacity>
            </View>
          </>
        )}
      </View>
    </TouchableOpacity>
  );
}

const styles = StyleSheet.create({
  itemContainer: {
    width: '100%',
    backgroundColor: '#E2E2FA',
    borderRadius: 10,
    padding: 15,
    marginBottom: 15,
  },
  headerRow: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
  },
  boxName: {
    fontSize: 18,
    fontWeight: 'bold',
    flexShrink: 1,
  },
  buttonContainer: {
    width: '100%',
    flexDirection: 'row',
    marginTop: 10,
  },
  button: {
    flex: 1,
    backgroundColor: '#007BFF',
    padding: 15,
    borderRadius: 5,
    marginRight: 10,
    alignItems: 'center',
  },
  deleteButton: {
    backgroundColor: '#FF3333',
    marginRight: 0,
  },
  buttonText: {
    color: '#fff',
    fontWeight: 'bold',
  },
});

---
Folder: C:\Users\porma\Desktop\sisa.ui\app\cash_boxes
File: EditCashBox.js
Content:
// app/cash_boxes/EditCashBox.js
import React, { useEffect, useState } from 'react';
import {
  View,
  Text,
  TextInput,
  StyleSheet,
  Alert,
  ActivityIndicator,
  Button,
  ScrollView,
  TouchableOpacity,
} from 'react-native';
import AsyncStorage from '@react-native-async-storage/async-storage';
import { useRouter } from 'expo-router';
import { useRoute } from '@react-navigation/native';
import { BASE_URL } from '../../src/config/index';
import CircleImagePicker from '../../src/components/CircleImagePicker';

export default function EditCashBox() {
  const router = useRouter();
  const route = useRoute();
  const { id } = route.params; // ID de la caja

  const [loading, setLoading] = useState(false);
  const [form, setForm] = useState({
    name: '',
    image_file_id: null,
  });

  const loadCashBox = async () => {
    if (!id) return;
    setLoading(true);
    try {
      const token = await AsyncStorage.getItem('token');
      if (!token) return;
      const response = await fetch(`${BASE_URL}/cash_boxes/${id}`, {
        headers: { Authorization: `Bearer ${token}` },
      });
      if (response.ok) {
        const data = await response.json();
        const cashBox = data.cash_box;
        setForm({
          name: cashBox.name || '',
          image_file_id: cashBox.image_file_id,
        });
      } else {
        Alert.alert('Error', 'No se pudo obtener la informaciÃ³n de la caja');
      }
    } catch (error) {
      Alert.alert('Error', error.message);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    if (id) loadCashBox();
  }, [id]);

  const handleImageUpdate = (newFileId) => {
    setForm({ ...form, image_file_id: newFileId });
  };

  const handleSave = async () => {
    const token = await AsyncStorage.getItem('token');
    if (!token) return;

    const url = `${BASE_URL}/cash_boxes/${id}`;
    try {
      const response = await fetch(url, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
          Authorization: `Bearer ${token}`,
        },
        body: JSON.stringify(form),
      });
      if (response.ok) {
        Alert.alert('Ã‰xito', 'Caja actualizada');
        router.back();
      } else {
        const errData = await response.json();
        Alert.alert('Error', errData.error || 'Error al guardar');
      }
    } catch (error) {
      Alert.alert('Error', error.message);
    }
  };

  const handleDelete = async () => {
    if (!id) return;
    Alert.alert(
      'Confirmar',
      'Â¿EstÃ¡s seguro de eliminar esta caja?',
      [
        { text: 'Cancelar', style: 'cancel' },
        {
          text: 'Eliminar',
          style: 'destructive',
          onPress: async () => {
            try {
              const token = await AsyncStorage.getItem('token');
              if (!token) return;
              const response = await fetch(`${BASE_URL}/cash_boxes/${id}`, {
                method: 'DELETE',
                headers: { Authorization: `Bearer ${token}` },
              });
              if (response.ok) {
                Alert.alert('Ã‰xito', 'Caja eliminada');
                router.back();
              } else {
                const errData = await response.json();
                Alert.alert('Error', errData.error || 'Error eliminando la caja');
              }
            } catch (error) {
              Alert.alert('Error', error.message);
            }
          },
        },
      ]
    );
  };

  if (loading) {
    return (
      <View style={styles.loaderContainer}>
        <ActivityIndicator size="large" color="#007BFF" />
      </View>
    );
  }

  return (
    <ScrollView style={styles.container}>
      <Text style={styles.title}>Editar Caja de Dinero</Text>

      <CircleImagePicker
        fileId={form.image_file_id}
        size={200}
        editable={true}
        onImageChange={handleImageUpdate}
      />

      <TextInput
        style={styles.input}
        placeholder="Nombre de la caja"
        value={form.name}
        onChangeText={(text) => setForm({ ...form, name: text })}
      />

      <TouchableOpacity style={styles.saveButton} onPress={handleSave}>
        <Text style={styles.saveButtonText}>Actualizar</Text>
      </TouchableOpacity>
      <TouchableOpacity style={styles.deleteButton} onPress={handleDelete}>
        <Text style={styles.deleteButtonText}>Eliminar Caja</Text>
      </TouchableOpacity>
      <Button title="Cancelar" onPress={() => router.back()} />
    </ScrollView>
  );
}

const styles = StyleSheet.create({
  container: { flex: 1, padding: 20, backgroundColor: '#fff' },
  loaderContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
  title: { fontSize: 24, fontWeight: 'bold', marginBottom: 20, textAlign: 'center' },
  input: {
    borderWidth: 1,
    padding: 10,
    marginVertical: 5,
    borderRadius: 5,
    fontSize: 16,
    backgroundColor: '#fff',
  },
  saveButton: {
    backgroundColor: '#007BFF',
    padding: 15,
    borderRadius: 10,
    marginBottom: 10,
    alignItems: 'center',
  },
  saveButtonText: {
    color: '#fff',
    fontSize: 18,
    fontWeight: 'bold',
  },
  deleteButton: {
    backgroundColor: '#FF3333',
    padding: 15,
    borderRadius: 10,
    marginBottom: 10,
    alignItems: 'center',
  },
  deleteButtonText: {
    color: '#fff',
    fontSize: 18,
    fontWeight: 'bold',
  },
});

---
Folder: C:\Users\porma\Desktop\sisa.ui\app\clients
File: AddClient.js
Content:
// app/clients/AddClient.js
import React, { useState } from 'react';
import {
  View,
  Text,
  TextInput,
  StyleSheet,
  Alert,
  Button,
  ScrollView,
  TouchableOpacity,
} from 'react-native';
import AsyncStorage from '@react-native-async-storage/async-storage';
import { useRouter } from 'expo-router';
import { BASE_URL } from '../../src/config/index';

// Importamos el nuevo recurso
import CircleImagePicker from '../../src/components/CircleImagePicker';

export default function AddClient() {
  const router = useRouter();
  const [form, setForm] = useState({
    business_name: '',
    tax_id: '',
    email: '',
    brand_file_id: null,
    phone: '',
    address: '',
  });

  // Callback al actualizar la imagen (nueva fileId)  
  const handleImageUpdate = (newFileId) => {
    setForm({ ...form, brand_file_id: newFileId });
  };

  // Crear un nuevo cliente (POST)
  const handleSave = async () => {
    try {
      const token = await AsyncStorage.getItem('token');
      if (!token) return;

      const response = await fetch(`${BASE_URL}/clients`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          Authorization: `Bearer ${token}`,
        },
        body: JSON.stringify(form),
      });

      if (response.ok) {
        Alert.alert('Ã‰xito', 'Cliente creado');
        router.back();
      } else {
        const errData = await response.json();
        Alert.alert('Error', errData.error || 'Error al guardar');
      }
    } catch (error) {
      Alert.alert('Error', error.message);
    }
  };

  return (
    <ScrollView style={styles.container}>
      <Text style={styles.title}>Agregar Cliente</Text>

      <CircleImagePicker
        fileId={form.brand_file_id}
        onImageChange={handleImageUpdate}
        editable={true}
        size={200}
      />

      <TextInput
        style={styles.input}
        placeholder="RazÃ³n Social"
        value={form.business_name}
        onChangeText={(text) => setForm({ ...form, business_name: text })}
      />
      <TextInput
        style={styles.input}
        placeholder="CUIT / Tax ID"
        value={form.tax_id}
        keyboardType="numeric"
        onChangeText={(text) => setForm({ ...form, tax_id: text })}
      />
      <TextInput
        style={styles.input}
        placeholder="Email"
        value={form.email}
        keyboardType="email-address"
        onChangeText={(text) => setForm({ ...form, email: text })}
      />
      <TextInput
        style={styles.input}
        placeholder="TelÃ©fono"
        value={form.phone}
        keyboardType="numeric"
        onChangeText={(text) => setForm({ ...form, phone: text })}
      />
      <TextInput
        style={styles.input}
        placeholder="DirecciÃ³n"
        value={form.address}
        onChangeText={(text) => setForm({ ...form, address: text })}
      />

      <TouchableOpacity style={styles.saveButton} onPress={handleSave}>
        <Text style={styles.saveButtonText}>Crear</Text>
      </TouchableOpacity>

      <Button title="Cancelar" onPress={() => router.back()} />
    </ScrollView>
  );
};

const styles = StyleSheet.create({
  container: { flex: 1, padding: 20, backgroundColor: '#fff' },
  title: { fontSize: 24, fontWeight: 'bold', marginBottom: 20, textAlign: 'center' },
  input: {
    borderWidth: 1,
    padding: 10,
    marginVertical: 5,
    borderRadius: 5,
    fontSize: 16,
    backgroundColor: '#fff',
  },
  saveButton: {
    backgroundColor: '#007BFF',
    padding: 15,
    borderRadius: 10,
    marginBottom: 10,
    alignItems: 'center',
  },
  saveButtonText: {
    color: '#fff',
    fontSize: 18,
    fontWeight: 'bold',
  },
});
---
Folder: C:\Users\porma\Desktop\sisa.ui\app\clients
File: ClientItem.js
Content:
// app/clients/ClientItem.js
import React from 'react';
import { View, Text, StyleSheet, TouchableOpacity, Alert } from 'react-native';
import CircleImagePicker from '../../src/components/CircleImagePicker';

/**
 * item: datos del cliente
 * expanded: bool para controlar expandido
 * onToggle, onDelete, onEdit: callbacks
 */
export default function ClientItem({ item, expanded, onToggle, onDelete, onEdit }) {

  const handleToggle = () => {
    onToggle(item.id);
  };

  // Ajusta un tamaÃ±o mÃ¡s chico, por ejemplo 50
  const avatarSize = expanded ? 80 : 50;

  return (
    <TouchableOpacity onPress={handleToggle} activeOpacity={0.8}>
      <View style={styles.itemContainer}>
        <View style={styles.headerRow}>
          <Text style={styles.companyName}>{item.business_name}</Text>

          {/* Usa CircleImagePicker en modo lectura (editable={false}). 
              Carga la imagen a partir de brand_file_id */}
          <CircleImagePicker
            fileId={item.brand_file_id}
            editable={false}
            size={avatarSize}
          />
        </View>

        {expanded && (
          <>
            <Text style={styles.itemText}>CUIT: {item.tax_id}</Text>
            <Text style={styles.itemText}>Email: {item.email}</Text>
            <Text style={styles.itemText}>DirecciÃ³n: {item.address}</Text>
            <Text style={styles.itemText}>TelÃ©fono: {item.phone}</Text>

            <View style={styles.buttonContainer}>
              <TouchableOpacity style={styles.button} onPress={() => onEdit(item.id)}>
                <Text style={styles.buttonText}>Editar</Text>
              </TouchableOpacity>
              <TouchableOpacity
                style={[styles.button, styles.deleteButton]}
                onPress={() =>
                  Alert.alert(
                    'Confirmar',
                    'Â¿EstÃ¡s seguro de eliminar este cliente?',
                    [
                      { text: 'Cancelar', style: 'cancel' },
                      {
                        text: 'Eliminar',
                        style: 'destructive',
                        onPress: () => onDelete(item.id),
                      },
                    ]
                  )
                }
              >
                <Text style={styles.buttonText}>Eliminar</Text>
              </TouchableOpacity>
            </View>
          </>
        )}
      </View>
    </TouchableOpacity>
  );
}

const styles = StyleSheet.create({
  itemContainer: {
    width: '100%',
    backgroundColor: '#E2E2FA',
    borderRadius: 10,
    padding: 15,
    marginBottom: 15,
  },
  headerRow: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
  },
  companyName: {
    fontSize: 18,
    fontWeight: 'bold',
    flexShrink: 1,
  },
  itemText: {
    fontSize: 16,
    marginTop: 5,
  },
  buttonContainer: {
    width: '100%',
    flexDirection: 'row',
    marginTop: 10,
  },
  button: {
    flex: 1,
    backgroundColor: '#007BFF',
    padding: 15,
    borderRadius: 5,
    marginRight: 10,
    alignItems: 'center',
  },
  deleteButton: {
    backgroundColor: '#FF3333',
    marginRight: 0,
  },
  buttonText: {
    color: '#fff',
    fontWeight: 'bold',
  },
});

---
Folder: C:\Users\porma\Desktop\sisa.ui\app\clients
File: ClientList.js
Content:
import React, { useEffect, useState } from 'react';
import {
  View,
  Text,
  FlatList,
  StyleSheet,
  Alert,
  ActivityIndicator,
  Platform,
  UIManager,
  LayoutAnimation,
  TextInput,
} from 'react-native';
import AsyncStorage from '@react-native-async-storage/async-storage';
import { useRouter } from 'expo-router';
import ClientItem from './ClientItem';
import { BASE_URL } from '../../src/config/index';
import Fuse from 'fuse.js';

export default function ClientList({ onSelectedClient }) {
  const router = useRouter();
  const [clients, setClients] = useState([]);
  const [filteredClients, setFilteredClients] = useState([]);
  const [loading, setLoading] = useState(true);
  const [searchQuery, setSearchQuery] = useState('');
  // Estado para almacenar el id del item actualmente expandido (null si ninguno)
  const [expandedItemId, setExpandedItemId] = useState(null);

// Propagar el cliente seleccionado al componente contenedor
useEffect(() => {
  if (onSelectedClient) {
    const selectedClient = clients.find(client => client.id === expandedItemId);
    onSelectedClient(selectedClient || null);
  }
}, [expandedItemId, clients]);

  // Activar animaciones en Android
  useEffect(() => {
    if (Platform.OS === 'android') {
      UIManager.setLayoutAnimationEnabledExperimental &&
        UIManager.setLayoutAnimationEnabledExperimental(true);
    }
  }, []);

  // Cargar clientes desde la API
  const loadClients = async () => {
    setLoading(true);
    const token = await AsyncStorage.getItem('token');
    if (!token) {
      setLoading(false);
      return;
    }
    try {
      const response = await fetch(`${BASE_URL}/clients`, {
        headers: { Authorization: `Bearer ${token}` },
      });
      if (response.ok) {
        const data = await response.json();
        const allClients = data.clients || data;
        setClients(allClients);
        setFilteredClients(allClients);
      } else {
        Alert.alert('Error', 'No se pudieron obtener los clientes');
      }
    } catch (error) {
      Alert.alert('Error', error.message);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    loadClients();
  }, []);

  // Configurar Fuse para bÃºsqueda avanzada (fuzzy search)
  useEffect(() => {
    if (searchQuery.trim() === '') {
      setFilteredClients(clients);
      return;
    }
    const options = {
      keys: ['business_name', 'tax_id', 'email', 'address', 'phone'],
      threshold: 0.4, // Ajusta la sensibilidad de la bÃºsqueda
      includeScore: true,
    };
    const fuse = new Fuse(clients, options);
    const results = fuse.search(searchQuery);
    const matchedClients = results.map(result => result.item);
    setFilteredClients(matchedClients);
  }, [searchQuery, clients]);

  const handleDelete = async (clientId) => {
    const token = await AsyncStorage.getItem('token');
    if (!token) return;
    try {
      const response = await fetch(`${BASE_URL}/clients/${clientId}`, {
        method: 'DELETE',
        headers: { Authorization: `Bearer ${token}` },
      });
      if (response.ok) {
        Alert.alert('Cliente eliminado');
        loadClients();
        if (expandedItemId === clientId) {
          setExpandedItemId(null);
        }
      } else {
        const errData = await response.json();
        Alert.alert('Error', errData.error || 'Error eliminando el cliente');
      }
    } catch (error) {
      Alert.alert('Error', error.message);
    }
  };

  const handleEdit = (clientId) => {
    router.push(`./editClient?id=${clientId}`);
  };

  // Alterna el estado expandido: solo un item se expande a la vez
  const handleToggle = (clientId) => {
    if (Platform.OS !== 'web' && LayoutAnimation && LayoutAnimation.configureNext) {
      LayoutAnimation.configureNext(LayoutAnimation.Presets.easeInEaseOut);
    }
    setExpandedItemId(prev => (prev === clientId ? null : clientId));
  };

  return (
    <View style={styles.container}>
      <TextInput
        style={styles.searchInput}
        placeholder="Buscar clientes..."
        value={searchQuery}
        onChangeText={setSearchQuery}
      />
      {loading ? (
        <ActivityIndicator size="large" color="#007BFF" style={styles.loader} />
      ) : (
        <FlatList
          data={filteredClients}
          keyExtractor={(item) => item.id.toString()}
          renderItem={({ item }) => (
            <ClientItem
              item={item}
              expanded={expandedItemId === item.id}
              onToggle={handleToggle}
              onDelete={handleDelete}
              onEdit={handleEdit}
            />
          )}
          contentContainerStyle={styles.listContainer}
          ListEmptyComponent={<Text>No hay clientes disponibles.</Text>}
        />
      )}
    </View>
  );
}

const styles = StyleSheet.create({
  container: { 
    flex: 1, 
    width: '100%',  // Se ocupa todo el ancho de la pantalla
    backgroundColor: '#fff',
  },
  searchInput: {
    height: 40,
    borderWidth: 1,
    borderColor: '#ccc',
    borderRadius: 8,
    paddingHorizontal: 10,
  },
  listContainer: { 
    marginTop: 20,
  },
  loader: { 
    marginTop: 20,
  },
  selectedClientText: {
    fontSize: 16,
    fontWeight: 'bold',
    marginVertical: 10,
  },
});

---
Folder: C:\Users\porma\Desktop\sisa.ui\app\clients
File: ClientsScreen.js
Content:
import React, { useState } from 'react';
import { View, Text, TouchableOpacity, StyleSheet } from 'react-native';
import ClientList from './ClientList';
import { useRouter } from 'expo-router';

export default function ClientsScreen() {
  const [selectedClient, setSelectedClient] = useState(null);
  const router = useRouter();

  //console.log(selectedClient.id);

  const handleAddClient = () => {
    router.push('./AddClient');
  };

  return (
    <View style={styles.container}>
      <Text style={styles.title}>Lista de Clientes</Text>
      <ClientList onSelectedClient={setSelectedClient} />
      <TouchableOpacity style={styles.floatingButton} onPress={handleAddClient}>
        <Text style={styles.floatingButtonText}>+</Text>
      </TouchableOpacity>
    </View>
  );
}

const styles = StyleSheet.create({
  container: { 
    flex: 1, 
    backgroundColor: '#fff',
    padding: 20 
  },
  title: { 
    fontSize: 24, 
    fontWeight: 'bold', 
    marginBottom: 10,
    textAlign: 'center',
  },
  floatingButton: {
    position: 'absolute',
    bottom: 20,
    right: 20,
    backgroundColor: '#007BFF',
    width: 60,
    height: 60,
    borderRadius: 30,
    alignItems: 'center',
    justifyContent: 'center',
    // Sombra para Android e iOS
    elevation: 5,
    shadowColor: '#000',
    shadowOpacity: 0.3,
    shadowOffset: { width: 0, height: 2 },
    shadowRadius: 2,
  },
  floatingButtonText: {
    fontSize: 30,
    color: '#fff',
    marginTop: -4, // Ajuste fino para centrar el '+'
  },
});

---
Folder: C:\Users\porma\Desktop\sisa.ui\app\clients
File: editClient.js
Content:
// app/clients/editClient.js
import React, { useEffect, useState } from 'react';
import {
  View,
  Text,
  TextInput,
  StyleSheet,
  Alert,
  ActivityIndicator,
  Button,
  ScrollView,
  TouchableOpacity,
} from 'react-native';
import AsyncStorage from '@react-native-async-storage/async-storage';
import { useRouter } from 'expo-router';
import { useRoute } from '@react-navigation/native';
import { BASE_URL } from '../../src/config/index';

// Importamos el CircleImagePicker
import CircleImagePicker from '../../src/components/CircleImagePicker';

export default function EditClient() {
  const router = useRouter();
  const route = useRoute();
  const { id } = route.params; // id del cliente

  const [loading, setLoading] = useState(false);
  const [form, setForm] = useState({
    business_name: '',
    tax_id: '',
    email: '',
    brand_file_id: null,
    phone: '',
    address: '',
  });

  // Cargar datos del cliente en modo ediciÃ³n
  const loadClient = async () => {
    if (!id) return;
    setLoading(true);
    try {
      const token = await AsyncStorage.getItem('token');
      if (!token) return;

      const response = await fetch(`${BASE_URL}/clients/${id}`, {
        headers: { Authorization: `Bearer ${token}` },
      });
      if (response.ok) {
        const data = await response.json();
        const client = data.client;
        setForm({
          business_name: client.business_name || '',
          tax_id: client.tax_id || '',
          email: client.email || '',
          brand_file_id: client.brand_file_id,
          phone: client.phone || '',
          address: client.address || '',
        });
      } else {
        Alert.alert('Error', 'No se pudo obtener la informaciÃ³n del cliente');
      }
    } catch (error) {
      Alert.alert('Error', error.message);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    if (id) {
      loadClient();
    }
  }, [id]);

  // Callback cuando se suba una nueva imagen
  const handleImageUpdate = (newFileId) => {
    // Actualizamos el brand_file_id en nuestro formulario
    setForm({ ...form, brand_file_id: newFileId });
  };

  // Guardar cambios
  const handleSave = async () => {
    const token = await AsyncStorage.getItem('token');
    if (!token) return;

    const url = id ? `${BASE_URL}/clients/${id}` : `${BASE_URL}/clients`;
    const method = id ? 'PUT' : 'POST';

    try {
      const response = await fetch(url, {
        method,
        headers: {
          'Content-Type': 'application/json',
          Authorization: `Bearer ${token}`,
        },
        body: JSON.stringify(form),
      });
      if (response.ok) {
        Alert.alert('Ã‰xito', id ? 'Cliente actualizado' : 'Cliente creado');
        router.back();
      } else {
        const errData = await response.json();
        Alert.alert('Error', errData.error || 'Error al guardar');
      }
    } catch (error) {
      Alert.alert('Error', error.message);
    }
  };

  // Eliminar cliente
  const handleDelete = async () => {
    if (!id) return;
    Alert.alert(
      'Confirmar',
      'Â¿EstÃ¡s seguro de eliminar este cliente?',
      [
        { text: 'Cancelar', style: 'cancel' },
        {
          text: 'Eliminar',
          style: 'destructive',
          onPress: async () => {
            try {
              const token = await AsyncStorage.getItem('token');
              if (!token) return;
              const response = await fetch(`${BASE_URL}/clients/${id}`, {
                method: 'DELETE',
                headers: { Authorization: `Bearer ${token}` },
              });
              if (response.ok) {
                Alert.alert('Ã‰xito', 'Cliente eliminado');
                router.back();
              } else {
                const errData = await response.json();
                Alert.alert('Error', errData.error || 'Error eliminando el cliente');
              }
            } catch (error) {
              Alert.alert('Error', error.message);
            }
          },
        },
      ]
    );
  };

  if (loading) {
    return (
      <View style={styles.loaderContainer}>
        <ActivityIndicator size="large" color="#007BFF" />
      </View>
    );
  }

  return (
    <ScrollView style={styles.container}>
      <Text style={styles.title}>{id ? 'Editar Cliente' : 'Agregar Cliente'}</Text>

      {/* USO de CircleImagePicker con tamaÃ±o 120 y editable */}
      <CircleImagePicker
        fileId={form.brand_file_id}
        size={200}
        editable={true}
        onImageChange={handleImageUpdate}
      />

      <TextInput
        style={styles.input}
        placeholder="RazÃ³n Social"
        value={form.business_name}
        onChangeText={(text) => setForm({ ...form, business_name: text })}
      />
      <TextInput
        style={styles.input}
        placeholder="CUIT / Tax ID"
        value={form.tax_id}
        keyboardType="numeric"
        onChangeText={(text) => setForm({ ...form, tax_id: text })}
      />
      <TextInput
        style={styles.input}
        placeholder="Email"
        value={form.email}
        keyboardType="email-address"
        onChangeText={(text) => setForm({ ...form, email: text })}
      />
      <TextInput
        style={styles.input}
        placeholder="TelÃ©fono"
        value={form.phone}
        keyboardType="numeric"
        onChangeText={(text) => setForm({ ...form, phone: text })}
      />
      <TextInput
        style={styles.input}
        placeholder="DirecciÃ³n"
        value={form.address}
        onChangeText={(text) => setForm({ ...form, address: text })}
      />

      <TouchableOpacity style={styles.saveButton} onPress={handleSave}>
        <Text style={styles.saveButtonText}>{id ? 'Actualizar' : 'Crear'}</Text>
      </TouchableOpacity>
      {id && (
        <TouchableOpacity style={styles.deleteButton} onPress={handleDelete}>
          <Text style={styles.deleteButtonText}>Eliminar Cliente</Text>
        </TouchableOpacity>
      )}
      <Button title="Cancelar" onPress={() => router.back()} />
    </ScrollView>
  );
};

const styles = StyleSheet.create({
  container: { flex: 1, padding: 20, backgroundColor: '#fff' },
  loaderContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
  title: { fontSize: 24, fontWeight: 'bold', marginBottom: 20, textAlign: 'center' },
  input: {
    borderWidth: 1,
    padding: 10,
    marginVertical: 5,
    borderRadius: 5,
    fontSize: 16,
    backgroundColor: '#fff',
  },
  saveButton: {
    backgroundColor: '#007BFF',
    padding: 15,
    borderRadius: 10,
    marginBottom: 10,
    alignItems: 'center',
  },
  saveButtonText: {
    color: '#fff',
    fontSize: 18,
    fontWeight: 'bold',
  },
  deleteButton: {
    backgroundColor: '#FF3333',
    padding: 15,
    borderRadius: 10,
    marginBottom: 10,
    alignItems: 'center',
  },
  deleteButtonText: {
    color: '#fff',
    fontSize: 18,
    fontWeight: 'bold',
  },
});

---
Folder: C:\Users\porma\Desktop\sisa.ui\app\folders
File: AppNavigator.js
Content:
// app/folders/AppNavigator.js
import React from 'react';
import { createStackNavigator } from '@react-navigation/stack';
import ClientFoldersScreen from './ClientFoldersScreen';
import FolderExplorer from './FolderExplorer'; // Esta pantalla manejarÃ¡ tanto la vista de subcarpetas como la de clientes

const Stack = createStackNavigator();

export default function AppNavigator() {
  return (
    <Stack.Navigator initialRouteName="ClientFoldersScreen">
      <Stack.Screen 
        name="ClientFoldersScreen" 
        component={ClientFoldersScreen} 
        options={{ headerShown: false }} 
      />
      <Stack.Screen 
        name="FolderExplorer" 
        component={FolderExplorer} 
        options={{ headerShown: false }} 
      />
    </Stack.Navigator>
  );
}

---
Folder: C:\Users\porma\Desktop\sisa.ui\app\folders
File: ClientFoldersScreen.js
Content:
import React, { useEffect, useState } from 'react';
import { 
  View, 
  FlatList, 
  StyleSheet, 
  TouchableOpacity, 
  Alert, 
  Text 
} from 'react-native';
import AsyncStorage from '@react-native-async-storage/async-storage';
import FolderItem from './FolderItem';

export default function ClientFoldersScreen({ navigation }) {
  const [clients, setClients] = useState([]);
  const [loading, setLoading] = useState(false);

  const loadClients = async () => {
    setLoading(true);
    try {
      const token = await AsyncStorage.getItem('token');
      if (!token) {
        Alert.alert('Error', 'No se encontrÃ³ token de autenticaciÃ³n.');
        setLoading(false);
        return;
      }
      const response = await fetch('https://sistema.depros.com.ar/clients', {
        method: 'GET',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      });
      if (response.ok) {
        const data = await response.json();
        setClients(data.clients || []);
      } else {
        const errorData = await response.json();
        Alert.alert('Error', errorData.error || 'Error al obtener clientes');
      }
    } catch (error) {
      Alert.alert('Error', error.message);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    loadClients();
  }, []);

  // Al tocar un cliente, se navega a FolderExplorer pasando el cliente seleccionado
  const handleClientPress = (client) => {
    console.log("Cliente presionado:", client);
    navigation.navigate('FolderExplorer', { client: JSON.stringify(client) });
  };

  const renderItem = ({ item }) => (
    <TouchableOpacity onPress={() => handleClientPress(item)}>
      <FolderItem folder={{ name: item.business_name, image: item.brand_file_id }} />
    </TouchableOpacity>
  );

  return (
    <View style={styles.container}>
      <FlatList
        data={clients}
        keyExtractor={(item) => item.id.toString()}
        renderItem={renderItem}
        contentContainerStyle={styles.listContainer}
      />
      {loading && <Text style={styles.loadingText}>Cargando clientes...</Text>}
    </View>
  );
}

const styles = StyleSheet.create({
  container: { flex: 1, backgroundColor: '#f0f0f0' },
  listContainer: { padding: 10 },
  loadingText: { textAlign: 'center', marginTop: 20, fontSize: 16 },
});

---
Folder: C:\Users\porma\Desktop\sisa.ui\app\folders
File: FolderExplorer.js
Content:
// app/folders/FolderExplorer.js
import React, { useEffect, useState, useMemo } from 'react';
import { 
  View, 
  FlatList, 
  StyleSheet, 
  TouchableOpacity, 
  Alert, 
  Text 
} from 'react-native';
import AsyncStorage from '@react-native-async-storage/async-storage';
import { Ionicons } from '@expo/vector-icons';
import { BASE_URL } from '../../src/config/index';
import { useRouter, useLocalSearchParams } from 'expo-router';
import FolderItem from './FolderItem';
import FolderModal from './FolderModal';

export default function FolderExplorer() {
  const router = useRouter();
  const params = useLocalSearchParams();

  // Si se pasa el parÃ¡metro 'folder', significa que estamos dentro de una carpeta.
  const parsedFolder = useMemo(() => {
    if (params.folder) {
      try {
        const folder = JSON.parse(params.folder);
        console.log("[FolderExplorer] Parsed folder:", folder);
        return folder;
      } catch (err) {
        console.error("[FolderExplorer] Error al parsear 'folder':", err);
        return null;
      }
    }
    return null;
  }, [params.folder]);

  // Si se pasa el parÃ¡metro 'client', significa que estamos en la vista de un cliente (nivel superior)
  const parsedClient = useMemo(() => {
    if (params.client) {
      try {
        const client = JSON.parse(params.client);
        console.log("[FolderExplorer] Parsed client:", client);
        return client;
      } catch (err) {
        console.error("[FolderExplorer] Error al parsear 'client':", err);
        return null;
      }
    }
    return null;
  }, [params.client]);

  const [items, setItems] = useState([]);
  const [loading, setLoading] = useState(false);
  const [modalVisible, setModalVisible] = useState(false);
  const [editingItem, setEditingItem] = useState(null);

  const loadItems = async () => {
    console.log("[FolderExplorer] Iniciando loadItems...");
    setLoading(true);
    try {
      const token = await AsyncStorage.getItem('token');
      if (!token) {
        Alert.alert("Error", "No se encontrÃ³ el token de autenticaciÃ³n.");
        setLoading(false);
        return;
      }
      let url = "";
      if (parsedFolder) {
        // Si estamos dentro de una carpeta, listamos aquellas cuyo parent_id sea el id de la carpeta actual.
        url = `${BASE_URL}/folders?parent_id=${parsedFolder.id}`;
        console.log("[FolderExplorer] Cargando subcarpetas para folder ID:", parsedFolder.id);
      } else if (parsedClient) {
        // Si estamos en la vista de cliente, listamos las carpetas de ese cliente (nivel superior).
        url = `${BASE_URL}/folders?client_id=${parsedClient.id}`;
        console.log("[FolderExplorer] Cargando carpetas para cliente ID:", parsedClient.id);
      } else {
        // Vista raÃ­z: se listan los clientes.
        url = `${BASE_URL}/clients`;
        console.log("[FolderExplorer] Cargando clientes (vista raÃ­z).");
      }
      console.log("[FolderExplorer] URL:", url);
      const response = await fetch(url, {
        method: 'GET',
        headers: {
          "Authorization": `Bearer ${token}`,
          "Content-Type": "application/json"
        }
      });
      console.log("[FolderExplorer] Estado de la respuesta:", response.status);
      if (response.ok) {
        const data = await response.json();
        console.log("[FolderExplorer] Datos recibidos:", data);
        // Si estamos en una vista interna (carpeta o cliente), se espera recibir un array de carpetas.
        if (parsedFolder || parsedClient) {
          setItems(data.folders || []);
        } else {
          // En la raÃ­z se esperan clientes.
          setItems(data.clients || []);
        }
      } else {
        const errorData = await response.json();
        console.error("[FolderExplorer] Error en la peticiÃ³n:", errorData);
        Alert.alert("Error", errorData.error || "Error al obtener datos");
      }
    } catch (error) {
      console.error("[FolderExplorer] Error en loadItems:", error);
      Alert.alert("Error", error.message);
    } finally {
      console.log("[FolderExplorer] Finalizando loadItems.");
      setLoading(false);
    }
  };

  useEffect(() => {
    loadItems();
  }, [parsedFolder, parsedClient]);

  // Al tocar un item, si es carpeta se navega hacia adentro
  const handleItemPress = (item) => {
    // Aseguramos que el objeto 'item' tenga el client_id
    let folderToPass = item;
    if (!item.client_id) {
      if (parsedFolder) {
        // Si ya estamos en una subcarpeta, usamos el client_id del folder padre o del cliente
        folderToPass = { ...item, client_id: parsedFolder.client_id || (parsedClient ? parsedClient.id : null) };
      } else if (parsedClient) {
        folderToPass = { ...item, client_id: parsedClient.id };
      }
    }
    if (parsedFolder || parsedClient) {
      router.push({
        pathname: "/folders/FolderExplorer",
        params: { folder: JSON.stringify(folderToPass) }
      });
      console.log("[FolderExplorer] NavegaciÃ³n iniciada con folder:", folderToPass);
    } else {
      // En la vista raÃ­z (clientes)
      router.push({
        pathname: "/folders/FolderExplorer",
        params: { client: JSON.stringify(item) }
      });
      console.log("[FolderExplorer] NavegaciÃ³n iniciada con cliente:", item);
    }
  };

  const handleItemLongPress = (item) => {
    if (!parsedFolder && !parsedClient) {
      Alert.alert(item.business_name, "Acciones para clientes no implementadas en este ejemplo.");
    } else {
      Alert.alert(item.name, "Selecciona una opciÃ³n", [
        { 
          text: "Editar", 
          onPress: () => { 
            setEditingItem(item); 
            setModalVisible(true);
            console.log("[FolderExplorer] Editar carpeta:", item);
          } 
        },
        { 
          text: "Eliminar", 
          onPress: () => { 
            console.log("[FolderExplorer] Eliminar carpeta con ID:", item.id);
            deleteFolder(item.id);
          }, 
          style: 'destructive' 
        },
        { text: "Cancelar", style: 'cancel' }
      ]);
    }
  };

  // FunciÃ³n para agregar carpeta incluyendo el client_id (siempre se retiene)
  const addFolder = async (folderData) => {
    if (!parsedClient && !parsedFolder) {
      Alert.alert("Error", "Solo se pueden agregar carpetas dentro de un cliente o carpeta.");
      return;
    }
    let parentIdentifier = {};
    if (parsedFolder) {
      parentIdentifier.parent_id = parsedFolder.id;
      // Si el folder actual no tiene client_id, se lo asignamos desde parsedFolder (si existe) o parsedClient
      parentIdentifier.client_id = parsedFolder.client_id ? parsedFolder.client_id : (parsedClient ? parsedClient.id : null);
    } else if (parsedClient) {
      parentIdentifier.client_id = parsedClient.id;
    }
    console.log("[FolderExplorer] Agregando carpeta con datos:", folderData, parentIdentifier);
    try {
      const token = await AsyncStorage.getItem('token');
      const response = await fetch(`${BASE_URL}/folders`, {
        method: 'POST',
        headers: {
          "Authorization": `Bearer ${token}`,
          "Content-Type": "application/json"
        },
        body: JSON.stringify({ ...folderData, ...parentIdentifier })
      });
      console.log("[FolderExplorer] Estado de agregar carpeta:", response.status);
      if (response.ok) {
        const data = await response.json();
        Alert.alert("Ã‰xito", data.message);
        loadItems();
      } else {
        const errorData = await response.json();
        Alert.alert("Error", errorData.error || "Error al crear carpeta");
      }
    } catch (error) {
      Alert.alert("Error", error.message);
    }
  };

  // FunciÃ³n para actualizar carpeta; se aÃ±ade client_id si no viene en updatedData
  const updateFolder = async (folderId, updatedData) => {
    console.log("[FolderExplorer] Actualizando carpeta con ID:", folderId, "Datos:", updatedData);
    
    // Si estamos editando desde una carpeta (parsedFolder) o vista de cliente, asignamos parent_id y client_id
    if (parsedFolder) {
      updatedData.parent_id = parsedFolder.id;
      updatedData.client_id = parsedFolder.client_id ? parsedFolder.client_id : (parsedClient ? parsedClient.id : null);
    } else if (parsedClient) {
      // En la vista de cliente de nivel superior, parent_id es null
      updatedData.parent_id = null;
      updatedData.client_id = parsedClient.id;
    }
    
    try {
      const token = await AsyncStorage.getItem('token');
      const response = await fetch(`${BASE_URL}/folders/${folderId}`, {
        method: 'PUT',
        headers: {
          "Authorization": `Bearer ${token}`,
          "Content-Type": "application/json"
        },
        body: JSON.stringify(updatedData)
      });
      console.log("[FolderExplorer] Estado de actualizar carpeta:", response.status);
      if (response.ok) {
        const data = await response.json();
        Alert.alert("Ã‰xito", data.message);
        loadItems();
      } else {
        const errorData = await response.json();
        Alert.alert("Error", errorData.error || "Error al actualizar carpeta");
      }
    } catch (error) {
      Alert.alert("Error", error.message);
    }
  };
  
  const deleteFolder = async (folderId) => {
    console.log("[FolderExplorer] Eliminando carpeta con ID:", folderId);
    try {
      const token = await AsyncStorage.getItem('token');
      const response = await fetch(`${BASE_URL}/folders/${folderId}`, {
        method: 'DELETE',
        headers: {
          "Authorization": `Bearer ${token}`,
          "Content-Type": "application/json"
        }
      });
      console.log("[FolderExplorer] Estado de eliminar carpeta:", response.status);
      if (response.ok) {
        const data = await response.json();
        Alert.alert("Ã‰xito", data.message);
        loadItems();
      } else {
        const errorData = await response.json();
        Alert.alert("Error", errorData.error || "Error al eliminar carpeta");
      }
    } catch (error) {
      Alert.alert("Error", error.message);
    }
  };

  const renderItem = ({ item }) => (
    <FolderItem
      // Si no estamos en vista de carpeta, se asume que el objeto corresponde a un cliente,
      // y se mapea a { name, image } usando business_name y brand_file_id.
      folder={parsedFolder || parsedClient ? item : { name: item.business_name, image: item.brand_file_id }}
      onPress={() => handleItemPress(item)}
      onLongPress={() => handleItemLongPress(item)}
    />
  );

  return (
    <View style={styles.container}>
      {(parsedFolder || parsedClient) && (
        <View style={styles.header}>
          <TouchableOpacity onPress={() => { router.back(); }} style={styles.backButton}>
            <Ionicons name="arrow-back" size={24} color="#007BFF" />
          </TouchableOpacity>
          <Text style={styles.headerTitle}>
            {parsedFolder ? parsedFolder.name : parsedClient.business_name}
          </Text>
        </View>
      )}
      <FlatList
        data={items}
        keyExtractor={(item) => item.id.toString()}
        renderItem={renderItem}
        numColumns={3}
        contentContainerStyle={styles.listContainer}
        ListEmptyComponent={
          <View style={styles.emptyContainer}>
            <Text style={styles.emptyText}>
              {(parsedFolder || parsedClient) 
                ? "No hay carpetas. Presiona + para agregar una nueva carpeta." 
                : "No se encontraron clientes."}
            </Text>
          </View>
        }
      />
      {(parsedFolder || parsedClient) && (
        <TouchableOpacity 
          style={styles.addButton} 
          onPress={() => { 
            setEditingItem(null); 
            setModalVisible(true); 
          }}
        >
          <Ionicons name="add" size={30} color="#fff" />
        </TouchableOpacity>
      )}
      <FolderModal
        visible={modalVisible}
        onClose={() => { setModalVisible(false); }}
        onSubmit={(folderData) => {
          if (editingItem) {
            updateFolder(editingItem.id, folderData);
          } else {
            addFolder(folderData);
          }
          setModalVisible(false);
        }}
        folder={editingItem}
      />
      {loading && <Text style={styles.loadingText}>Cargando...</Text>}
    </View>
  );
}

const styles = StyleSheet.create({
  container: { flex: 1, backgroundColor: "#f0f0f0" },
  header: { 
    flexDirection: "row", 
    alignItems: "center", 
    paddingHorizontal: 10, 
    paddingVertical: 15, 
    backgroundColor: "#fff", 
    elevation: 2 
  },
  backButton: { marginRight: 10 },
  headerTitle: { fontSize: 18, fontWeight: "bold" },
  listContainer: { padding: 10 },
  addButton: { 
    position: "absolute", 
    bottom: 20, 
    right: 20, 
    backgroundColor: "#007BFF", 
    width: 60, 
    height: 60, 
    borderRadius: 30, 
    alignItems: "center", 
    justifyContent: "center", 
    elevation: 4 
  },
  loadingText: { textAlign: "center", marginTop: 20, fontSize: 16 },
  emptyContainer: { alignItems: "center", marginTop: 20 },
  emptyText: { fontSize: 16, color: "#555" }
});

---
Folder: C:\Users\porma\Desktop\sisa.ui\app\folders
File: FolderItem.js
Content:
import React from 'react';
import { View, Text, StyleSheet, TouchableOpacity, Dimensions } from 'react-native';
import CircleImagePicker from '../../src/components/CircleImagePicker';

const windowWidth = Dimensions.get('window').width;
const itemWidth = (windowWidth - 40) / 3; // Ajusta 40 segÃºn el padding/margin total

export default function FolderItem({ folder, onPress, onLongPress }) {
  return (
    <TouchableOpacity
      style={[styles.container, { width: itemWidth }]}
      onPress={onPress}
      onLongPress={onLongPress}
      hitSlop={{ top: 20, bottom: 20, left: 20, right: 20 }}
    >
      <View style={styles.iconContainer}>
        <Text style={styles.folderIcon}>ðŸ“�</Text>
        {folder.image && (
          <View style={styles.imageCircle}>
            <CircleImagePicker fileId={folder.image} editable={false} size={40} />
          </View>
        )}
      </View>
      <Text style={styles.folderName} numberOfLines={1}>{folder.name}</Text>
    </TouchableOpacity>
  );
}

const styles = StyleSheet.create({
  container: {
    margin: 5,
    alignItems: 'center',
    justifyContent: 'center',
  },
  iconContainer: {
    width: 80,
    height: 80,
    alignItems: 'center',
    justifyContent: 'center',
    position: 'relative',
  },
  folderIcon: {
    fontSize: 50,
  },
  imageCircle: {
    position: 'absolute',
    width: 40,
    height: 40,
    top: 35,
    left: 22,
  },
  folderName: {
    marginTop: 5,
    fontSize: 14,
    textAlign: 'center',
  },
});

---
Folder: C:\Users\porma\Desktop\sisa.ui\app\folders
File: FolderModal.js
Content:
// app/folders/FolderModal.js
import React, { useState, useEffect } from 'react';
import { Modal, View, Text, TextInput, TouchableOpacity, StyleSheet } from 'react-native';
import CircleImagePicker from '../../src/components/CircleImagePicker';

export default function FolderModal({ visible, onClose, onSubmit, folder }) {
  const [folderName, setFolderName] = useState('');
  const [folderImageId, setFolderImageId] = useState(null);

  useEffect(() => {
    if (folder) {
      setFolderName(folder.name);
      setFolderImageId(folder.image || null);
    } else {
      setFolderName('');
      setFolderImageId(null);
    }
  }, [folder]);

  const handleSubmit = () => {
    if (folderName.trim() === '') {
      Alert.alert("Error", "El nombre de la carpeta es obligatorio");
      return;
    }
    // Enviar el payload con el campo 'folder_image_file_id' en lugar de 'image'
    onSubmit({ name: folderName, folder_image_file_id: folderImageId });
  };

  return (
    <Modal
      visible={visible}
      transparent
      animationType="slide"
      onRequestClose={onClose}
    >
      <View style={styles.overlay}>
        <View style={styles.modalContainer}>
          <Text style={styles.title}>{folder ? 'Edit Folder' : 'Add Folder'}</Text>
          {/* IntegraciÃ³n del CircleImagePicker para seleccionar la imagen de la carpeta */}
          <CircleImagePicker
            fileId={folderImageId}
            editable={true}
            size={80}
            onImageChange={(newFileId) => setFolderImageId(newFileId)}
          />
          <TextInput
            placeholder="Folder Name"
            value={folderName}
            onChangeText={setFolderName}
            style={styles.input}
          />
          <View style={styles.buttonContainer}>
            <TouchableOpacity onPress={onClose} style={[styles.button, styles.cancelButton]}>
              <Text style={styles.buttonText}>Cancel</Text>
            </TouchableOpacity>
            <TouchableOpacity onPress={handleSubmit} style={[styles.button, styles.submitButton]}>
              <Text style={styles.buttonText}>{folder ? 'Save' : 'Add'}</Text>
            </TouchableOpacity>
          </View>
        </View>
      </View>
    </Modal>
  );
}

const styles = StyleSheet.create({
  overlay: {
    flex: 1,
    backgroundColor: 'rgba(0,0,0,0.5)',
    justifyContent:'center',
    alignItems:'center',
  },
  modalContainer: {
    width: '80%',
    backgroundColor: '#fff',
    borderRadius: 8,
    padding: 20,
    elevation: 5,
  },
  title: {
    fontSize: 18,
    fontWeight: 'bold',
    marginBottom: 15,
    textAlign: 'center',
  },
  input: {
    borderWidth: 1,
    borderColor: '#ccc',
    borderRadius: 8,
    paddingHorizontal: 10,
    paddingVertical: 8,
    marginTop: 15,
    marginBottom: 15,
  },
  buttonContainer: {
    flexDirection:'row',
    justifyContent:'space-between',
  },
  button: {
    flex: 1,
    paddingVertical: 10,
    borderRadius: 8,
    marginHorizontal: 5,
    alignItems: 'center',
  },
  cancelButton: {
    backgroundColor: '#ccc',
  },
  submitButton: {
    backgroundColor: '#007BFF',
  },
  buttonText: {
    color: '#fff',
    fontWeight: 'bold',
  },
});

---
Folder: C:\Users\porma\Desktop\sisa.ui\app\jobs
File: AddJob.js
Content:
import React, { useState, useEffect } from 'react';
import { 
  View,
  Text,
  TextInput,
  StyleSheet,
  Alert,
  Button,
  ScrollView,
  TouchableOpacity,
  Image,
  ActivityIndicator
} from 'react-native';
import AsyncStorage from '@react-native-async-storage/async-storage';
import { useRouter } from 'expo-router';
import { BASE_URL } from '../../src/config/index';
import { pickAndProcessImage, uploadImage } from '../../src/utils/imageUtils';
import { Picker } from '@react-native-picker/picker';

export default function AddJob() {
  const router = useRouter();
  const [form, setForm] = useState({
    client_id: '',
    product_service_id: '',
    folder_id: '',
    type_of_work: '',
    description: '',
    status: '',
    start_datetime: '',
    end_datetime: '',
    multiplicative_value: '1.00',
    attached_files: [],
  });

  // States for dropdowns
  const [clients, setClients] = useState([]);
  const [productsServices, setProductsServices] = useState([]);
  const [folders, setFolders] = useState([]);

  // States for handling attachments
  const [localAttachments, setLocalAttachments] = useState([]);
  const [loadingAttachment, setLoadingAttachment] = useState(false);

  // Load clients and products/services on mount
  useEffect(() => {
    loadClients();
    loadProductsServices();
  }, []);

  // When client_id changes, load folders for that client
  useEffect(() => {
    if (form.client_id) {
      loadFolders(form.client_id);
    } else {
      setFolders([]);
      setForm(prev => ({ ...prev, folder_id: '' }));
    }
  }, [form.client_id]);

  const loadClients = async () => {
    try {
      const token = await AsyncStorage.getItem('token');
      const response = await fetch(`${BASE_URL}/clients`, {
        headers: { Authorization: `Bearer ${token}` },
      });
      if (response.ok) {
        const data = await response.json();
        setClients(data.clients || []);
      } else {
        Alert.alert('Error', 'Unable to fetch clients');
      }
    } catch (error) {
      Alert.alert('Error', error.message);
    }
  };

  const loadProductsServices = async () => {
    try {
      const token = await AsyncStorage.getItem('token');
      const response = await fetch(`${BASE_URL}/products_services`, {
        headers: { Authorization: `Bearer ${token}` },
      });
      if (response.ok) {
        const data = await response.json();
        setProductsServices(data.products_services || []);
      } else {
        Alert.alert('Error', 'Unable to fetch products/services');
      }
    } catch (error) {
      Alert.alert('Error', error.message);
    }
  };

  const loadFolders = async (clientId) => {
    try {
      const token = await AsyncStorage.getItem('token');
      const response = await fetch(`${BASE_URL}/folders?client_id=${clientId}`, {
        headers: { Authorization: `Bearer ${token}` },
      });
      if (response.ok) {
        const data = await response.json();
        setFolders(data.folders || []);
      } else {
        Alert.alert('Error', 'Unable to fetch folders for the client');
      }
    } catch (error) {
      Alert.alert('Error', error.message);
    }
  };

  const handleAddAttachment = async () => {
    Alert.alert(
      'Select File',
      'Do you want to use the camera or gallery?',
      [
        { text: 'Camera', onPress: () => pickAndUploadAttachment(true) },
        { text: 'Gallery', onPress: () => pickAndUploadAttachment(false) },
        { text: 'Cancel', style: 'cancel' },
      ]
    );
  };

  const pickAndUploadAttachment = async (fromCamera) => {
    try {
      setLoadingAttachment(true);
      const localUri = await pickAndProcessImage(fromCamera);
      if (!localUri) {
        setLoadingAttachment(false);
        return;
      }
      const token = await AsyncStorage.getItem('token');
      if (!token) {
        setLoadingAttachment(false);
        return;
      }
      const fileId = await uploadImage(localUri, token);
      if (fileId) {
        setForm(prev => ({
          ...prev,
          attached_files: [...prev.attached_files, fileId],
        }));
        setLocalAttachments(prev => ([...prev, { fileId, uri: localUri }]));
      } else {
        Alert.alert('Error', 'File upload failed');
      }
    } catch (error) {
      Alert.alert('Error', error.message);
    } finally {
      setLoadingAttachment(false);
    }
  };

  const handleSave = async () => {
    if (!form.client_id) {
      Alert.alert('Error', 'Please select a client');
      return;
    }
    if (!form.product_service_id) {
      Alert.alert('Error', 'Please select a product or service');
      return;
    }
    try {
      const token = await AsyncStorage.getItem('token');
      const response = await fetch(`${BASE_URL}/jobs`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          Authorization: `Bearer ${token}`,
        },
        body: JSON.stringify(form),
      });
      console.log(response);
      if (response.ok) {
        Alert.alert('Success', 'Job created');
        router.back();
      } else {
        const errData = await response.json();
        Alert.alert('Error', errData.error || 'Error saving job');
        
      }
    } catch (error) {
      Alert.alert('Error', error.message);
    }
  };

  const statusOptions = [
    { label: 'Pending', value: 'pending' },
    { label: 'In Progress', value: 'in_progress' },
    { label: 'Completed', value: 'completed' },
    { label: 'Canceled', value: 'canceled' },
  ];

  return (
    <ScrollView style={styles.container}>
      <Text style={styles.title}>Add Job</Text>

      {/* Client Picker */}
      <Text style={styles.label}>Client:</Text>
      <Picker
        selectedValue={form.client_id}
        onValueChange={(itemValue) => setForm({ ...form, client_id: itemValue })}
        style={styles.picker}
      >
        <Picker.Item label="Select a client" value="" />
        {clients.map(client => (
          <Picker.Item key={client.id} label={client.business_name} value={client.id} />
        ))}
      </Picker>

      {/* Product/Service Picker */}
      <Text style={styles.label}>Product / Service:</Text>
      <Picker
        selectedValue={form.product_service_id}
        onValueChange={(itemValue) => setForm({ ...form, product_service_id: itemValue })}
        style={styles.picker}
      >
        <Picker.Item label="Select a product or service" value="" />
        {productsServices.map(ps => (
          <Picker.Item key={ps.id} label={ps.description} value={ps.id} />
        ))}
      </Picker>

      {/* Folder Picker */}
      <Text style={styles.label}>Folder:</Text>
      <Picker
        selectedValue={form.folder_id}
        onValueChange={(itemValue) => setForm({ ...form, folder_id: itemValue })}
        style={styles.picker}
      >
        <Picker.Item label="Select a folder" value="" />
        {folders.map(folder => (
          <Picker.Item key={folder.id} label={folder.name} value={folder.id} />
        ))}
      </Picker>

      {/* Type of Work */}
      <TextInput
        style={styles.input}
        placeholder="Type of work"
        value={form.type_of_work}
        onChangeText={(text) => setForm({ ...form, type_of_work: text })}
      />

      {/* Description */}
      <TextInput
        style={styles.input}
        placeholder="Description"
        value={form.description}
        onChangeText={(text) => setForm({ ...form, description: text })}
      />

      {/* Status */}
      <Text style={styles.label}>Status:</Text>
      <Picker
        selectedValue={form.status}
        onValueChange={(itemValue) => setForm({ ...form, status: itemValue })}
        style={styles.picker}
      >
        <Picker.Item label="Select a status" value="" />
        {statusOptions.map(status => (
          <Picker.Item key={status.value} label={status.label} value={status.value} />
        ))}
      </Picker>

      {/* Start Datetime */}
      <TextInput
        style={styles.input}
        placeholder="Start (YYYY-MM-DD HH:MM)"
        value={form.start_datetime}
        onChangeText={(text) => setForm({ ...form, start_datetime: text })}
      />

      {/* End Datetime */}
      <TextInput
        style={styles.input}
        placeholder="End (YYYY-MM-DD HH:MM)"
        value={form.end_datetime}
        onChangeText={(text) => setForm({ ...form, end_datetime: text })}
      />

      {/* Multiplicative Value */}
      <TextInput
        style={styles.input}
        placeholder="Multiplicative Value"
        value={form.multiplicative_value}
        keyboardType="numeric"
        onChangeText={(text) => setForm({ ...form, multiplicative_value: text })}
      />

      {/* Attachments */}
      <View style={styles.attachmentsContainer}>
        <Text style={styles.sectionTitle}>Attached Files:</Text>
        {localAttachments.length > 0 ? (
          localAttachments.map((att, index) => (
            <View key={index} style={styles.attachmentItem}>
              <Image source={{ uri: att.uri }} style={styles.attachmentImage} />
            </View>
          ))
        ) : (
          <Text>No files added</Text>
        )}
        {loadingAttachment && <ActivityIndicator style={styles.loaderAttachment} />}
        <TouchableOpacity style={styles.addAttachmentButton} onPress={handleAddAttachment}>
          <Text style={styles.addAttachmentButtonText}>Add File</Text>
        </TouchableOpacity>
      </View>

      <TouchableOpacity style={styles.saveButton} onPress={handleSave}>
        <Text style={styles.saveButtonText}>Create</Text>
      </TouchableOpacity>
      <Button title="Cancel" onPress={() => router.back()} />
    </ScrollView>
  );
}

const styles = StyleSheet.create({
  container: { flex: 1, padding: 20, backgroundColor: '#fff' },
  title: { fontSize: 24, fontWeight: 'bold', marginBottom: 20, textAlign: 'center' },
  label: { fontSize: 16, marginVertical: 5 },
  input: { 
    borderWidth: 1, 
    padding: 10, 
    marginVertical: 5, 
    borderRadius: 5, 
    fontSize: 16, 
    backgroundColor: '#fff' 
  },
  picker: {
    borderWidth: 1,
    borderRadius: 5,
    marginVertical: 5,
  },
  attachmentsContainer: { marginVertical: 15 },
  sectionTitle: { fontSize: 18, fontWeight: 'bold', marginBottom: 10 },
  attachmentItem: { marginBottom: 10 },
  attachmentImage: { width: 80, height: 80, borderRadius: 8 },
  addAttachmentButton: { 
    backgroundColor: '#007BFF', 
    padding: 10, 
    borderRadius: 5, 
    alignItems: 'center' 
  },
  addAttachmentButtonText: { color: '#fff', fontWeight: 'bold' },
  loaderAttachment: { marginTop: 10 },
  saveButton: { 
    backgroundColor: '#007BFF', 
    padding: 15, 
    borderRadius: 10, 
    marginVertical: 10, 
    alignItems: 'center' 
  },
  saveButtonText: { color: '#fff', fontSize: 18, fontWeight: 'bold' },
});

---
Folder: C:\Users\porma\Desktop\sisa.ui\app\jobs
File: EditJob.js
Content:
import React, { useEffect, useState } from 'react';
import { 
  View,
  Text,
  TextInput,
  StyleSheet,
  Alert,
  ActivityIndicator,
  Button,
  ScrollView,
  TouchableOpacity,
  Image
} from 'react-native';
import AsyncStorage from '@react-native-async-storage/async-storage';
import { useRouter } from 'expo-router';
import { useRoute } from '@react-navigation/native';
import { BASE_URL } from '../../src/config/index';
import { pickAndProcessImage, uploadImage } from '../../src/utils/imageUtils';
import { Picker } from '@react-native-picker/picker';

export default function EditJob() {
  const router = useRouter();
  const route = useRoute();
  const { id } = route.params; // Job ID

  const [loading, setLoading] = useState(false);
  const [form, setForm] = useState({
    client_id: '',
    product_service_id: '',
    folder_id: '',
    type_of_work: '',
    description: '',
    status: '',
    start_datetime: '',
    end_datetime: '',
    multiplicative_value: '1.00',
    attached_files: [],
  });
  const [clients, setClients] = useState([]);
  const [productsServices, setProductsServices] = useState([]);
  const [folders, setFolders] = useState([]);
  const [localAttachments, setLocalAttachments] = useState([]);
  const [loadingAttachment, setLoadingAttachment] = useState(false);

  const loadJob = async () => {
    if (!id) return;
    setLoading(true);
    try {
      const token = await AsyncStorage.getItem('token');
      if (!token) return;
      const response = await fetch(`${BASE_URL}/jobs/${id}`, {
        headers: { Authorization: `Bearer ${token}` },
      });
      if (response.ok) {
        const data = await response.json();
        const job = data.job;
        setForm({
          client_id: job.client_id || '',
          product_service_id: job.product_service_id || '',
          folder_id: job.folder_id || '',
          type_of_work: job.type_of_work || '',
          description: job.description || '',
          status: job.status || '',
          start_datetime: job.start_datetime || '',
          end_datetime: job.end_datetime || '',
          multiplicative_value: job.multiplicative_value ? job.multiplicative_value.toString() : '1.00',
          attached_files: job.attached_files || [],
        });
      } else {
        Alert.alert('Error', 'Unable to fetch job details');
      }
    } catch (error) {
      Alert.alert('Error', error.message);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    if (id) {
      loadJob();
      loadClients();
      loadProductsServices();
    }
  }, [id]);

  useEffect(() => {
    if (form.client_id) {
      loadFolders(form.client_id);
    } else {
      setFolders([]);
      setForm(prev => ({ ...prev, folder_id: '' }));
    }
  }, [form.client_id]);

  const loadClients = async () => {
    try {
      const token = await AsyncStorage.getItem('token');
      const response = await fetch(`${BASE_URL}/clients`, {
        headers: { Authorization: `Bearer ${token}` },
      });
      if (response.ok) {
        const data = await response.json();
        setClients(data.clients || []);
      } else {
        Alert.alert('Error', 'Unable to fetch clients');
      }
    } catch (error) {
      Alert.alert('Error', error.message);
    }
  };

  const loadProductsServices = async () => {
    try {
      const token = await AsyncStorage.getItem('token');
      const response = await fetch(`${BASE_URL}/products_services`, {
        headers: { Authorization: `Bearer ${token}` },
      });
      if (response.ok) {
        const data = await response.json();
        setProductsServices(data.products_services || []);
      } else {
        Alert.alert('Error', 'Unable to fetch products/services');
      }
    } catch (error) {
      Alert.alert('Error', error.message);
    }
  };

  const loadFolders = async (clientId) => {
    try {
      const token = await AsyncStorage.getItem('token');
      const response = await fetch(`${BASE_URL}/folders?client_id=${clientId}`, {
        headers: { Authorization: `Bearer ${token}` },
      });
      if (response.ok) {
        const data = await response.json();
        setFolders(data.folders || []);
      } else {
        Alert.alert('Error', 'Unable to fetch folders for the client');
      }
    } catch (error) {
      Alert.alert('Error', error.message);
    }
  };

  const handleAddAttachment = async () => {
    Alert.alert(
      'Select File',
      'Do you want to use the camera or gallery?',
      [
        { text: 'Camera', onPress: () => pickAndUploadAttachment(true) },
        { text: 'Gallery', onPress: () => pickAndUploadAttachment(false) },
        { text: 'Cancel', style: 'cancel' },
      ]
    );
  };

  const pickAndUploadAttachment = async (fromCamera) => {
    try {
      setLoadingAttachment(true);
      const localUri = await pickAndProcessImage(fromCamera);
      if (!localUri) {
        setLoadingAttachment(false);
        return;
      }
      const token = await AsyncStorage.getItem('token');
      if (!token) {
        setLoadingAttachment(false);
        return;
      }
      const fileId = await uploadImage(localUri, token);
      if (fileId) {
        setForm(prev => ({
          ...prev,
          attached_files: [...prev.attached_files, fileId],
        }));
        setLocalAttachments(prev => ([...prev, { fileId, uri: localUri }]));
      } else {
        Alert.alert('Error', 'File upload failed');
      }
    } catch (error) {
      Alert.alert('Error', error.message);
    } finally {
      setLoadingAttachment(false);
    }
  };

  const handleSave = async () => {
    const token = await AsyncStorage.getItem('token');
    if (!token) return;
    try {
      const response = await fetch(`${BASE_URL}/jobs/${id}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
          Authorization: `Bearer ${token}`,
        },
        body: JSON.stringify(form),
      });
      if (response.ok) {
        Alert.alert('Success', 'Job updated');
        router.back();
      } else {
        const errData = await response.json();
        Alert.alert('Error', errData.error || 'Error updating job');
      }
    } catch (error) {
      Alert.alert('Error', error.message);
    }
  };

  const handleDelete = async () => {
    if (!id) return;
    Alert.alert(
      'Confirm',
      'Are you sure you want to delete this job?',
      [
        { text: 'Cancel', style: 'cancel' },
        {
          text: 'Delete',
          style: 'destructive',
          onPress: async () => {
            try {
              const token = await AsyncStorage.getItem('token');
              if (!token) return;
              const response = await fetch(`${BASE_URL}/jobs/${id}`, {
                method: 'DELETE',
                headers: { Authorization: `Bearer ${token}` },
              });
              if (response.ok) {
                Alert.alert('Success', 'Job deleted');
                router.back();
              } else {
                const errData = await response.json();
                Alert.alert('Error', errData.error || 'Error deleting job');
              }
            } catch (error) {
              Alert.alert('Error', error.message);
            }
          },
        },
      ]
    );
  };

  const statusOptions = [
    { label: 'Pending', value: 'pending' },
    { label: 'In Progress', value: 'in_progress' },
    { label: 'Completed', value: 'completed' },
    { label: 'Canceled', value: 'canceled' },
  ];

  if (loading) {
    return (
      <View style={styles.loaderContainer}>
        <ActivityIndicator size="large" color="#007BFF" />
      </View>
    );
  }

  return (
    <ScrollView style={styles.container}>
      <Text style={styles.title}>Edit Job</Text>

      {/* Client Picker */}
      <Text style={styles.label}>Client:</Text>
      <Picker
        selectedValue={form.client_id}
        onValueChange={(itemValue) => setForm({ ...form, client_id: itemValue })}
        style={styles.picker}
      >
        <Picker.Item label="Select a client" value="" />
        {clients.map(client => (
          <Picker.Item key={client.id} label={client.business_name} value={client.id} />
        ))}
      </Picker>

      {/* Product/Service Picker */}
      <Text style={styles.label}>Product / Service:</Text>
      <Picker
        selectedValue={form.product_service_id}
        onValueChange={(itemValue) => setForm({ ...form, product_service_id: itemValue })}
        style={styles.picker}
      >
        <Picker.Item label="Select a product/service" value="" />
        {productsServices.map(ps => (
          <Picker.Item key={ps.id} label={ps.description} value={ps.id} />
        ))}
      </Picker>

      {/* Folder Picker */}
      <Text style={styles.label}>Folder:</Text>
      <Picker
        selectedValue={form.folder_id}
        onValueChange={(itemValue) => setForm({ ...form, folder_id: itemValue })}
        style={styles.picker}
      >
        <Picker.Item label="Select a folder" value="" />
        {folders.map(folder => (
          <Picker.Item key={folder.id} label={folder.name} value={folder.id} />
        ))}
      </Picker>

      {/* Type of Work */}
      <TextInput
        style={styles.input}
        placeholder="Type of work"
        value={form.type_of_work}
        onChangeText={(text) => setForm({ ...form, type_of_work: text })}
      />

      {/* Description */}
      <TextInput
        style={styles.input}
        placeholder="Description"
        value={form.description}
        onChangeText={(text) => setForm({ ...form, description: text })}
      />

      {/* Status */}
      <Text style={styles.label}>Status:</Text>
      <Picker
        selectedValue={form.status}
        onValueChange={(itemValue) => setForm({ ...form, status: itemValue })}
        style={styles.picker}
      >
        <Picker.Item label="Select a status" value="" />
        {statusOptions.map(status => (
          <Picker.Item key={status.value} label={status.label} value={status.value} />
        ))}
      </Picker>

      {/* Start Datetime */}
      <TextInput
        style={styles.input}
        placeholder="Start (YYYY-MM-DD HH:MM)"
        value={form.start_datetime}
        onChangeText={(text) => setForm({ ...form, start_datetime: text })}
      />

      {/* End Datetime */}
      <TextInput
        style={styles.input}
        placeholder="End (YYYY-MM-DD HH:MM)"
        value={form.end_datetime}
        onChangeText={(text) => setForm({ ...form, end_datetime: text })}
      />

      {/* Multiplicative Value */}
      <TextInput
        style={styles.input}
        placeholder="Multiplicative Value"
        value={form.multiplicative_value}
        keyboardType="numeric"
        onChangeText={(text) => setForm({ ...form, multiplicative_value: text })}
      />

      {/* Attachments */}
      <View style={styles.attachmentsContainer}>
        <Text style={styles.sectionTitle}>Attached Files:</Text>
        {localAttachments.length > 0 ? (
          localAttachments.map((att, index) => (
            <View key={index} style={styles.attachmentItem}>
              <Image source={{ uri: att.uri }} style={styles.attachmentImage} />
            </View>
          ))
        ) : (
          <Text>No files added</Text>
        )}
        {loadingAttachment && <ActivityIndicator style={styles.loaderAttachment} />}
        <TouchableOpacity style={styles.addAttachmentButton} onPress={handleAddAttachment}>
          <Text style={styles.addAttachmentButtonText}>Add File</Text>
        </TouchableOpacity>
      </View>

      <TouchableOpacity style={styles.saveButton} onPress={handleSave}>
        <Text style={styles.saveButtonText}>Update</Text>
      </TouchableOpacity>
      <TouchableOpacity style={styles.deleteButton} onPress={handleDelete}>
        <Text style={styles.deleteButtonText}>Delete Job</Text>
      </TouchableOpacity>
      <Button title="Cancel" onPress={() => router.back()} />
    </ScrollView>
  );
}

const styles = StyleSheet.create({
  container: { flex: 1, padding: 20, backgroundColor: '#fff' },
  loaderContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
  title: { fontSize: 24, fontWeight: 'bold', marginBottom: 20, textAlign: 'center' },
  label: { fontSize: 16, marginVertical: 5 },
  input: { 
    borderWidth: 1, 
    padding: 10, 
    marginVertical: 5, 
    borderRadius: 5, 
    fontSize: 16, 
    backgroundColor: '#fff' 
  },
  picker: {
    borderWidth: 1,
    borderRadius: 5,
    marginVertical: 5,
  },
  attachmentsContainer: { marginVertical: 15 },
  sectionTitle: { fontSize: 18, fontWeight: 'bold', marginBottom: 10 },
  attachmentItem: { marginBottom: 10 },
  attachmentImage: { width: 80, height: 80, borderRadius: 8 },
  addAttachmentButton: { 
    backgroundColor: '#007BFF', 
    padding: 10, 
    borderRadius: 5, 
    alignItems: 'center' 
  },
  addAttachmentButtonText: { color: '#fff', fontWeight: 'bold' },
  loaderAttachment: { marginTop: 10 },
  saveButton: { 
    backgroundColor: '#007BFF', 
    padding: 15, 
    borderRadius: 10, 
    marginVertical: 10, 
    alignItems: 'center' 
  },
  saveButtonText: { color: '#fff', fontSize: 18, fontWeight: 'bold' },
  deleteButton: { 
    backgroundColor: '#FF3333', 
    padding: 15, 
    borderRadius: 10, 
    marginVertical: 10, 
    alignItems: 'center' 
  },
  deleteButtonText: { color: '#fff', fontSize: 18, fontWeight: 'bold' },
});

---
Folder: C:\Users\porma\Desktop\sisa.ui\app\jobs
File: JobItem.js
Content:
import React from 'react';
import { View, Text, StyleSheet, TouchableOpacity, Alert, Image } from 'react-native';

export default function JobItem({ item, expanded, onToggle, onDelete, onEdit }) {
  const handleToggle = () => {
    onToggle(item.id);
  };

  // Render attachment preview if available
  const renderAttachmentPreview = () => {
    if (item.attached_files && item.attached_files.length > 0) {
      // Asumimos que el backend devuelve URLs en attached_files_url
      const previewUri = item.attached_files_url && item.attached_files_url[0]
                           ? item.attached_files_url[0]
                           : null;
      if (previewUri) {
        return (
          <Image source={{ uri: previewUri }} style={styles.attachmentPreview} />
        );
      } else {
        return (
          <View style={styles.attachmentCounter}>
            <Text style={styles.attachmentCounterText}>{item.attached_files.length}</Text>
          </View>
        );
      }
    }
    return null;
  };

  return (
    <TouchableOpacity onPress={handleToggle} activeOpacity={0.8}>
      <View style={styles.itemContainer}>
        <View style={styles.headerRow}>
          <Text style={styles.jobTitle}>{item.title}</Text>
          {renderAttachmentPreview()}
        </View>
        {expanded && (
          <>
            <Text style={styles.jobDetail}>Description: {item.description || '-'}</Text>
            <Text style={styles.jobDetail}>Status: {item.status || '-'}</Text>
            {item.due_date && <Text style={styles.jobDetail}>Due Date: {item.due_date}</Text>}
            <View style={styles.buttonContainer}>
              <TouchableOpacity style={styles.button} onPress={() => onEdit(item.id)}>
                <Text style={styles.buttonText}>Edit</Text>
              </TouchableOpacity>
              <TouchableOpacity
                style={[styles.button, styles.deleteButton]}
                onPress={() =>
                  Alert.alert(
                    'Confirm',
                    'Are you sure you want to delete this job?',
                    [
                      { text: 'Cancel', style: 'cancel' },
                      {
                        text: 'Delete',
                        style: 'destructive',
                        onPress: () => onDelete(item.id),
                      },
                    ]
                  )
                }
              >
                <Text style={styles.buttonText}>Delete</Text>
              </TouchableOpacity>
            </View>
          </>
        )}
      </View>
    </TouchableOpacity>
  );
}

const styles = StyleSheet.create({
  itemContainer: {
    width: '100%',
    backgroundColor: '#E2E2FA',
    borderRadius: 10,
    padding: 15,
    marginBottom: 15,
  },
  headerRow: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
  },
  jobTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    flexShrink: 1,
  },
  jobDetail: {
    fontSize: 16,
    marginTop: 5,
  },
  buttonContainer: {
    width: '100%',
    flexDirection: 'row',
    marginTop: 10,
  },
  button: {
    flex: 1,
    backgroundColor: '#007BFF',
    padding: 15,
    borderRadius: 5,
    marginRight: 10,
    alignItems: 'center',
  },
  deleteButton: {
    backgroundColor: '#FF3333',
    marginRight: 0,
  },
  buttonText: {
    color: '#fff',
    fontWeight: 'bold',
  },
  attachmentPreview: {
    width: 50,
    height: 50,
    borderRadius: 5,
  },
  attachmentCounter: {
    backgroundColor: '#007BFF',
    width: 50,
    height: 50,
    borderRadius: 5,
    justifyContent: 'center',
    alignItems: 'center',
  },
  attachmentCounterText: {
    color: '#fff',
    fontWeight: 'bold',
  },
});

---
Folder: C:\Users\porma\Desktop\sisa.ui\app\jobs
File: JobsList.js
Content:
import React, { useEffect, useState } from 'react';
import { 
  View, 
  Text, 
  FlatList, 
  StyleSheet, 
  ActivityIndicator, 
  TextInput, 
  Alert, 
  Platform, 
  UIManager, 
  LayoutAnimation 
} from 'react-native';
import AsyncStorage from '@react-native-async-storage/async-storage';
import { useRouter } from 'expo-router';
import Fuse from 'fuse.js';
import { BASE_URL } from '../../src/config/index';
import JobItem from './JobItem';

export default function JobsList() {
  const router = useRouter();
  const [jobs, setJobs] = useState([]);
  const [filteredJobs, setFilteredJobs] = useState([]);
  const [loading, setLoading] = useState(true);
  const [searchQuery, setSearchQuery] = useState('');
  const [expandedItemId, setExpandedItemId] = useState(null);

  useEffect(() => {
    if (Platform.OS === 'android' && UIManager.setLayoutAnimationEnabledExperimental) {
      UIManager.setLayoutAnimationEnabledExperimental(true);
    }
  }, []);

  const loadJobs = async () => {
    setLoading(true);
    try {
      const token = await AsyncStorage.getItem('token');
      if (!token) {
        setLoading(false);
        return;
      }
      const response = await fetch(`${BASE_URL}/jobs`, {
        headers: { Authorization: `Bearer ${token}` },
      });
      console.log(response);
      if (response.ok) {
        const data = await response.json();
        const allJobs = data.jobs || data;
        setJobs(allJobs);
        setFilteredJobs(allJobs);
      } else {
        Alert.alert('Error', 'Unable to fetch jobs');
      }
    } catch (error) {
      Alert.alert('Error', error.message);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    loadJobs();
  }, []);

  useEffect(() => {
    if (searchQuery.trim() === '') {
      setFilteredJobs(jobs);
      return;
    }
    const options = {
      keys: ['title', 'description', 'status'],
      threshold: 0.4,
      includeScore: true,
    };
    const fuse = new Fuse(jobs, options);
    const results = fuse.search(searchQuery);
    setFilteredJobs(results.map(result => result.item));
  }, [searchQuery, jobs]);

  const handleDelete = async (jobId) => {
    try {
      const token = await AsyncStorage.getItem('token');
      if (!token) return;
      const response = await fetch(`${BASE_URL}/jobs/${jobId}`, {
        method: 'DELETE',
        headers: { Authorization: `Bearer ${token}` },
      });
      if (response.ok) {
        Alert.alert('Success', 'Job deleted');
        loadJobs();
        if (expandedItemId === jobId) {
          setExpandedItemId(null);
        }
      } else {
        const errData = await response.json();
        Alert.alert('Error', errData.error || 'Error deleting job');
      }
    } catch (error) {
      Alert.alert('Error', error.message);
    }
  };

  const handleEdit = (jobId) => {
    router.push(`./EditJob?id=${jobId}`);
  };

  const handleToggle = (jobId) => {
    if (Platform.OS !== 'web' && LayoutAnimation && LayoutAnimation.configureNext) {
      LayoutAnimation.configureNext(LayoutAnimation.Presets.easeInEaseOut);
    }
    setExpandedItemId(prev => (prev === jobId ? null : jobId));
  };

  return (
    <View style={styles.container}>
      <TextInput
        style={styles.searchInput}
        placeholder="Search jobs..."
        value={searchQuery}
        onChangeText={setSearchQuery}
      />
      {loading ? (
        <ActivityIndicator size="large" color="#007BFF" style={styles.loader} />
      ) : (
        <FlatList
          data={filteredJobs}
          keyExtractor={(item) => item.id.toString()}
          renderItem={({ item }) => (
            <JobItem
              item={item}
              expanded={expandedItemId === item.id}
              onToggle={handleToggle}
              onDelete={handleDelete}
              onEdit={handleEdit}
            />
          )}
          contentContainerStyle={styles.listContainer}
          ListEmptyComponent={<Text>No jobs available.</Text>}
        />
      )}
    </View>
  );
}

const styles = StyleSheet.create({
  container: { 
    flex: 1, 
    width: '100%',
    backgroundColor: '#fff',
    padding: 20,
  },
  searchInput: {
    height: 40,
    borderWidth: 1,
    borderColor: '#ccc',
    borderRadius: 8,
    paddingHorizontal: 10,
  },
  listContainer: { 
    marginTop: 20,
  },
  loader: { 
    marginTop: 20,
  },
});

---
Folder: C:\Users\porma\Desktop\sisa.ui\app\jobs
File: JobsScreen.js
Content:
import React from 'react';
import { View, Text, TouchableOpacity, StyleSheet } from 'react-native';
import { useRouter } from 'expo-router';
import JobsList from './JobsList';

export default function JobsScreen() {
  const router = useRouter();

  const handleAddJob = () => {
    router.push('./AddJob');
  };

  return (
    <View style={styles.container}>
      <Text style={styles.title}>Jobs</Text>
      <JobsList />
      <TouchableOpacity style={styles.floatingButton} onPress={handleAddJob}>
        <Text style={styles.floatingButtonText}>+</Text>
      </TouchableOpacity>
    </View>
  );
}

const styles = StyleSheet.create({
  container: { 
    flex: 1, 
    backgroundColor: '#fff',
    padding: 20 
  },
  title: { 
    fontSize: 24, 
    fontWeight: 'bold', 
    marginBottom: 10,
    textAlign: 'center' 
  },
  floatingButton: {
    position: 'absolute',
    bottom: 20,
    right: 20,
    backgroundColor: '#007BFF',
    width: 60,
    height: 60,
    borderRadius: 30,
    alignItems: 'center',
    justifyContent: 'center',
    elevation: 5,
    shadowColor: '#000',
    shadowOpacity: 0.3,
    shadowOffset: { width: 0, height: 2 },
    shadowRadius: 2,
  },
  floatingButtonText: { 
    fontSize: 30, 
    color: '#fff', 
    marginTop: -4 
  },
});

---
Folder: C:\Users\porma\Desktop\sisa.ui\app\login
File: forgot-password.js
Content:
import React, { useState } from 'react';
import { View, TextInput, Button, Alert, StyleSheet } from 'react-native';
import { useRouter } from 'expo-router';
// <-- IMPORTAMOS BASE_URL
import { BASE_URL } from '../../src/config/index';

export default function ForgotPassword() {
  const router = useRouter();
  const [email, setEmail] = useState('');

  const handleForgotPassword = async () => {
    if (!email) {
      Alert.alert('Error', 'Por favor ingresa tu email');
      return;
    }
    try {
      // USAMOS BASE_URL
      const response = await fetch(`${BASE_URL}/forgot_password`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ email }),
      });
      const result = await response.json();
      if (response.ok) {
        Alert.alert('Ã‰xito', result.message || 'Email de recuperaciÃ³n enviado');
        router.replace('./login');
      } else {
        Alert.alert('Error', result.error || 'Error al enviar la solicitud');
      }
    } catch (error) {
      Alert.alert('Error', error.message);
    }
  };

  return (
    <View style={styles.container}>
      <TextInput
        placeholder="Ingresa tu email"
        style={styles.input}
        value={email}
        keyboardType="email-address"
        onChangeText={setEmail}
      />
      <Button title="Enviar recuperaciÃ³n" onPress={handleForgotPassword} />
    </View>
  );
};

const styles = StyleSheet.create({
  container: { flex: 1, padding: 20 },
  input: { borderWidth: 1, padding: 10, marginBottom: 10 },
});

---
Folder: C:\Users\porma\Desktop\sisa.ui\app\login
File: login.js
Content:
import React, { useState } from 'react';
import { View, TextInput, Button, Alert, StyleSheet } from 'react-native';
import { useRouter } from 'expo-router';
import AsyncStorage from '@react-native-async-storage/async-storage';
// <-- IMPORTAMOS BASE_URL
import { BASE_URL } from '../../src/config/index';

export default function Login() {
  const router = useRouter();
  const [username, setUsername] = useState('pormauro');
  const [password, setPassword] = useState('123456');

  const handleLogin = async () => {
    if (!username || !password) {
      Alert.alert('Error', 'Ingresa username y contraseÃ±a');
      return;
    }
    try {
      // USAMOS BASE_URL
      const response = await fetch(`${BASE_URL}/login`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ username, password }),
      });

      if (response.ok) {
        const authHeader = response.headers.get('Authorization');
        const token = authHeader && authHeader.startsWith('Bearer ')
          ? authHeader.split(' ')[1]
          : null;

        if (token) {
          // Guardamos el token en AsyncStorage
          await AsyncStorage.setItem('token', token);

          // Solicitar el perfil del usuario para guardar sus datos
          const profileResponse = await fetch(`${BASE_URL}/profile`, {
            method: 'GET',
            headers: { 
              'Authorization': `Bearer ${token}`,
              'Content-Type': 'application/json'
            },
          });

          if (profileResponse.ok) {
            const profileData = await profileResponse.json();
            const { id, username: userName, email } = profileData.user;
            await AsyncStorage.setItem('user_id', id.toString());
            await AsyncStorage.setItem('username', userName);
            await AsyncStorage.setItem('email', email);

            // Redirigir a Home
            router.replace('../home');
          } else {
            Alert.alert('Error', 'No se pudo obtener el perfil del usuario');
          }
        } else {
          Alert.alert('Error', 'Token no recibido en el encabezado');
        }
      } else {
        const result = await response.json();
        Alert.alert('Error', result.error || 'Credenciales invÃ¡lidas');
      }
    } catch (error) {
      Alert.alert('Error', error.message);
    }
  };

  return (
    <View style={styles.container}>
      <TextInput
        placeholder="Username"
        style={styles.input}
        value={username}
        onChangeText={setUsername}
      />
      <TextInput
        placeholder="ContraseÃ±a"
        secureTextEntry
        style={styles.input}
        value={password}
        onChangeText={setPassword}
      />
      <Button title="Ingresar" onPress={handleLogin} />
      <Button title="Registrarse" onPress={() => router.push('./register')} />
      <Button title="OlvidÃ© mi contraseÃ±a" onPress={() => router.push('./forgot-password')} />
    </View>
  );
};

const styles = StyleSheet.create({
  container: { flex: 1, padding: 20, justifyContent: 'center' },
  input: { borderWidth: 1, padding: 10, marginBottom: 10 },
});

---
Folder: C:\Users\porma\Desktop\sisa.ui\app\login
File: register.js
Content:
import React, { useState } from 'react';
import { View, TextInput, Button, Alert, StyleSheet } from 'react-native';
import { useRouter } from 'expo-router';
// <-- IMPORTAMOS BASE_URL
import { BASE_URL } from '../../src/config/index';

export default function Register () {
  const router = useRouter();
  const [username, setUsername] = useState('pormauro');
  const [email, setEmail] = useState('pormauro@gmail.com');
  const [password, setPassword] = useState('123456');

  const isValidPassword = (password) => {
    return /^(?=.*[A-Z])(?=.*\d).{8,}$/.test(password);
  };
  const handleRegister = async () => {
    if (!isValidPassword(password)) {
      Alert.alert('Error', 'La contraseÃ±a debe tener al menos 8 caracteres, una mayÃºscula y un nÃºmero.');
      return;
    }
    
    if (!username || !email || !password) {
      Alert.alert('Error', 'Todos los campos son requeridos');
      return;
    }
    try {
      // USAMOS BASE_URL
      const response = await fetch(`${BASE_URL}/register`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ username, email, password }),
      });
      const result = await response.json();
      if (response.ok) {
        Alert.alert(
          'Ã‰xito',
          result.message || 'Usuario registrado. Revisa tu email para activar la cuenta.'
        );
        router.replace('./login');
      } else {
        Alert.alert('Error', result.error || 'Error en el registro');
      }
    } catch (error) {
      Alert.alert('Error', error.message);
    }
  };

  return (
    <View style={styles.container}>
      <TextInput
        placeholder="Nombre de usuario"
        style={styles.input}
        value={username}
        onChangeText={setUsername}
      />
      <TextInput
        placeholder="Correo electrÃ³nico"
        style={styles.input}
        value={email}
        keyboardType="email-address"
        onChangeText={setEmail}
      />
      <TextInput
        placeholder="ContraseÃ±a"
        secureTextEntry
        style={styles.input}
        value={password}
        onChangeText={setPassword}
      />
      <Button title="Registrar" onPress={handleRegister} />
    </View>
  );
};

const styles = StyleSheet.create({
  container: { flex: 1, padding: 20 },
  input: { borderWidth: 1, padding: 10, marginBottom: 10 },
});

---
Folder: C:\Users\porma\Desktop\sisa.ui\app\products_services
File: AddProductService.js
Content:
// app/products_services/AddProductService.js
import React, { useState } from 'react';
import { Picker } from '@react-native-picker/picker';
import {
  View,
  Text,
  TextInput,
  StyleSheet,
  Alert,
  Button,
  ScrollView,
  TouchableOpacity,
} from 'react-native';
import AsyncStorage from '@react-native-async-storage/async-storage';
import { useRouter } from 'expo-router';
import { BASE_URL } from '../../src/config/index';
import CircleImagePicker from '../../src/components/CircleImagePicker';

export default function AddProductService() {
  const router = useRouter();
  const [form, setForm] = useState({
    description: '',
    category: '',
    price: '',
    cost: '',
    difficulty: '',
    item_type: '', // Se espera "product" o "service"
    stock: '0',
    product_image_file_id: null,
  });

  const handleImageUpdate = (newFileId) => {
    setForm({ ...form, product_image_file_id: newFileId });
  };

  const handleSave = async () => {
    // AquÃ­ podrÃ­as agregar validaciones de campos obligatorios
    try {
      const token = await AsyncStorage.getItem('token');
      if (!token) return;
      // Convertir price, cost y stock a nÃºmeros
      const payload = {
        ...form,
        price: parseFloat(form.price),
        cost: form.cost ? parseFloat(form.cost) : null,
        stock: parseInt(form.stock, 10),
      };

      const response = await fetch(`${BASE_URL}/products_services`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          Authorization: `Bearer ${token}`,
        },
        body: JSON.stringify(payload),
      });

      if (response.ok) {
        Alert.alert('Ã‰xito', 'Producto/Servicio creado');
        router.back();
      } else {
        const errData = await response.json();
        Alert.alert('Error', errData.error || 'Error al guardar');
      }
    } catch (error) {
      Alert.alert('Error', error.message);
    }
  };

  return (
    <ScrollView style={styles.container}>
      <Text style={styles.title}>Agregar Producto/Servicio</Text>

      <CircleImagePicker
        fileId={form.product_image_file_id}
        onImageChange={handleImageUpdate}
        editable={true}
        size={200}
      />

      <TextInput
        style={styles.input}
        placeholder="DescripciÃ³n"
        value={form.description}
        onChangeText={(text) => setForm({ ...form, description: text })}
      />
      <TextInput
        style={styles.input}
        placeholder="CategorÃ­a"
        value={form.category}
        onChangeText={(text) => setForm({ ...form, category: text })}
      />
      <TextInput
        style={styles.input}
        placeholder="Precio"
        value={form.price}
        keyboardType="numeric"
        onChangeText={(text) => setForm({ ...form, price: text })}
      />
      <TextInput
        style={styles.input}
        placeholder="Costo"
        value={form.cost}
        keyboardType="numeric"
        onChangeText={(text) => setForm({ ...form, cost: text })}
      />
      <TextInput
        style={styles.input}
        placeholder="Dificultad"
        value={form.difficulty}
        onChangeText={(text) => setForm({ ...form, difficulty: text })}
      />
        <Text style={styles.label}>Tipo</Text>
        <Picker
        selectedValue={form.item_type}
        style={styles.picker}
        onValueChange={(itemValue) => setForm({ ...form, item_type: itemValue })}
        >
        <Picker.Item label="Producto" value="product" />
        <Picker.Item label="Servicio" value="service" />
        </Picker>
      <TextInput
        style={styles.input}
        placeholder="Stock"
        value={form.stock}
        keyboardType="numeric"
        onChangeText={(text) => setForm({ ...form, stock: text })}
      />

      <TouchableOpacity style={styles.saveButton} onPress={handleSave}>
        <Text style={styles.saveButtonText}>Crear</Text>
      </TouchableOpacity>

      <Button title="Cancelar" onPress={() => router.back()} />
    </ScrollView>
  );
}

const styles = StyleSheet.create({
  container: { flex: 1, padding: 20, backgroundColor: '#fff' },
  title: { fontSize: 24, fontWeight: 'bold', marginBottom: 20, textAlign: 'center' },
  input: {
    borderWidth: 1,
    padding: 10,
    marginVertical: 5,
    borderRadius: 5,
    fontSize: 16,
    backgroundColor: '#fff',
  },
  saveButton: {
    backgroundColor: '#007BFF',
    padding: 15,
    borderRadius: 10,
    marginVertical: 10,
    alignItems: 'center',
  },
  saveButtonText: {
    color: '#fff',
    fontSize: 18,
    fontWeight: 'bold',
  },
  label: {
    fontSize: 16,
    marginTop: 10,
  },
  picker: {
    height: 50,
    marginVertical: 5,
  },
});

---
Folder: C:\Users\porma\Desktop\sisa.ui\app\products_services
File: EditProductService.js
Content:
// app/products_services/EditProductService.js
import React, { useEffect, useState } from 'react';
import { Picker } from '@react-native-picker/picker';
import {
  View,
  Text,
  TextInput,
  StyleSheet,
  Alert,
  ActivityIndicator,
  Button,
  ScrollView,
  TouchableOpacity,
} from 'react-native';
import AsyncStorage from '@react-native-async-storage/async-storage';
import { useRouter } from 'expo-router';
import { useRoute } from '@react-navigation/native';
import { BASE_URL } from '../../src/config/index';
import CircleImagePicker from '../../src/components/CircleImagePicker';

export default function EditProductService() {
  const router = useRouter();
  const route = useRoute();
  const { id } = route.params; // ID del producto/servicio

  const [loading, setLoading] = useState(false);
  const [form, setForm] = useState({
    description: '',
    category: '',
    price: '',
    cost: '',
    difficulty: '',
    item_type: '',
    stock: '',
    product_image_file_id: null,
  });

  const loadProductService = async () => {
    if (!id) return;
    setLoading(true);
    try {
      const token = await AsyncStorage.getItem('token');
      if (!token) return;
      const response = await fetch(`${BASE_URL}/products_services/${id}`, {
        headers: { Authorization: `Bearer ${token}` },
      });
      if (response.ok) {
        const data = await response.json();
        const productService = data.product_service;
        setForm({
          description: productService.description || '',
          category: productService.category || '',
          price: productService.price ? productService.price.toString() : '',
          cost: productService.cost ? productService.cost.toString() : '',
          difficulty: productService.difficulty || '',
          item_type: productService.item_type || '',
          stock: productService.stock ? productService.stock.toString() : '0',
          product_image_file_id: productService.product_image_file_id,
        });
      } else {
        Alert.alert('Error', 'No se pudo obtener la informaciÃ³n del producto/servicio');
      }
    } catch (error) {
      Alert.alert('Error', error.message);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    if (id) loadProductService();
  }, [id]);

  const handleImageUpdate = (newFileId) => {
    setForm({ ...form, product_image_file_id: newFileId });
  };

  const handleSave = async () => {
    const token = await AsyncStorage.getItem('token');
    if (!token) return;
    const url = `${BASE_URL}/products_services/${id}`;
    try {
      // Convertir price, cost y stock a nÃºmeros
      const payload = {
        ...form,
        price: parseFloat(form.price),
        cost: form.cost ? parseFloat(form.cost) : null,
        stock: parseInt(form.stock, 10),
      };

      const response = await fetch(url, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
          Authorization: `Bearer ${token}`,
        },
        body: JSON.stringify(payload),
      });
      if (response.ok) {
        Alert.alert('Ã‰xito', 'Producto/Servicio actualizado');
        router.back();
      } else {
        const errData = await response.json();
        Alert.alert('Error', errData.error || 'Error al guardar');
      }
    } catch (error) {
      Alert.alert('Error', error.message);
    }
  };

  const handleDelete = async () => {
    if (!id) return;
    Alert.alert(
      'Confirmar',
      'Â¿EstÃ¡s seguro de eliminar este producto/servicio?',
      [
        { text: 'Cancelar', style: 'cancel' },
        {
          text: 'Eliminar',
          style: 'destructive',
          onPress: async () => {
            try {
              const token = await AsyncStorage.getItem('token');
              if (!token) return;
              const response = await fetch(`${BASE_URL}/products_services/${id}`, {
                method: 'DELETE',
                headers: { Authorization: `Bearer ${token}` },
              });
              if (response.ok) {
                Alert.alert('Ã‰xito', 'Producto/Servicio eliminado');
                router.back();
              } else {
                const errData = await response.json();
                Alert.alert('Error', errData.error || 'Error eliminando');
              }
            } catch (error) {
              Alert.alert('Error', error.message);
            }
          },
        },
      ]
    );
  };

  if (loading) {
    return (
      <View style={styles.loaderContainer}>
        <ActivityIndicator size="large" color="#007BFF" />
      </View>
    );
  }

  return (
    <ScrollView style={styles.container}>
      <Text style={styles.title}>Editar Producto/Servicio</Text>

      <CircleImagePicker
        fileId={form.product_image_file_id}
        size={200}
        editable={true}
        onImageChange={handleImageUpdate}
      />

      <TextInput
        style={styles.input}
        placeholder="DescripciÃ³n"
        value={form.description}
        onChangeText={(text) => setForm({ ...form, description: text })}
      />
      <TextInput
        style={styles.input}
        placeholder="CategorÃ­a"
        value={form.category}
        onChangeText={(text) => setForm({ ...form, category: text })}
      />
      <TextInput
        style={styles.input}
        placeholder="Precio"
        value={form.price}
        keyboardType="numeric"
        onChangeText={(text) => setForm({ ...form, price: text })}
      />
      <TextInput
        style={styles.input}
        placeholder="Costo"
        value={form.cost}
        keyboardType="numeric"
        onChangeText={(text) => setForm({ ...form, cost: text })}
      />
      <TextInput
        style={styles.input}
        placeholder="Dificultad"
        value={form.difficulty}
        onChangeText={(text) => setForm({ ...form, difficulty: text })}
      />
        <Text style={styles.label}>Tipo</Text>
        <Picker
        selectedValue={form.item_type}
        style={styles.picker}
        onValueChange={(itemValue) => setForm({ ...form, item_type: itemValue })}
        >
        <Picker.Item label="Producto" value="product" />
        <Picker.Item label="Servicio" value="service" />
        </Picker>
      <TextInput
        style={styles.input}
        placeholder="Stock"
        value={form.stock}
        keyboardType="numeric"
        onChangeText={(text) => setForm({ ...form, stock: text })}
      />

      <TouchableOpacity style={styles.saveButton} onPress={handleSave}>
        <Text style={styles.saveButtonText}>Actualizar</Text>
      </TouchableOpacity>
      <TouchableOpacity style={styles.deleteButton} onPress={handleDelete}>
        <Text style={styles.deleteButtonText}>Eliminar Producto/Servicio</Text>
      </TouchableOpacity>
      <Button title="Cancelar" onPress={() => router.back()} />
    </ScrollView>
  );
}

const styles = StyleSheet.create({
  container: { flex: 1, padding: 20, backgroundColor: '#fff' },
  loaderContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
  title: { fontSize: 24, fontWeight: 'bold', marginBottom: 20, textAlign: 'center' },
  input: {
    borderWidth: 1,
    padding: 10,
    marginVertical: 5,
    borderRadius: 5,
    fontSize: 16,
    backgroundColor: '#fff',
  },
  saveButton: {
    backgroundColor: '#007BFF',
    padding: 15,
    borderRadius: 10,
    marginVertical: 10,
    alignItems: 'center',
  },
  saveButtonText: {
    color: '#fff',
    fontSize: 18,
    fontWeight: 'bold',
  },
  deleteButton: {
    backgroundColor: '#FF3333',
    padding: 15,
    borderRadius: 10,
    marginVertical: 10,
    alignItems: 'center',
  },
  deleteButtonText: {
    color: '#fff',
    fontSize: 18,
    fontWeight: 'bold',
  },
});

---
Folder: C:\Users\porma\Desktop\sisa.ui\app\products_services
File: ProductServiceItem.js
Content:
// app/products_services/ProductServiceItem.js
import React from 'react';
import { View, Text, StyleSheet, TouchableOpacity, Alert } from 'react-native';
import CircleImagePicker from '../../src/components/CircleImagePicker';

/**
 * Props:
 * - item: Objeto con los datos del producto/servicio.
 * - expanded: Booleano para controlar la expansiÃ³n.
 * - onToggle, onDelete, onEdit: callbacks.
 */
export default function ProductServiceItem({ item, expanded, onToggle, onDelete, onEdit }) {
  const handleToggle = () => {
    onToggle(item.id);
  };

  // TamaÃ±o del avatar segÃºn el estado expandido
  const avatarSize = expanded ? 80 : 50;

  return (
    <TouchableOpacity onPress={handleToggle} activeOpacity={0.8}>
      <View style={styles.itemContainer}>
        <View style={styles.headerRow}>
          <Text style={styles.itemDescription}>{item.description}</Text>
          <CircleImagePicker
            fileId={item.product_image_file_id}
            editable={false}
            size={avatarSize}
          />
        </View>
        {expanded && (
          <>
            <Text style={styles.itemDetail}>CategorÃ­a: {item.category || '-'}</Text>
            <Text style={styles.itemDetail}>Precio: ${item.price}</Text>
            <Text style={styles.itemDetail}>Costo: ${item.cost || '-'}</Text>
            <Text style={styles.itemDetail}>Dificultad: {item.difficulty || '-'}</Text>
            <Text style={styles.itemDetail}>Tipo: {item.item_type}</Text>
            <Text style={styles.itemDetail}>Stock: {item.stock}</Text>
            <View style={styles.buttonContainer}>
              <TouchableOpacity style={styles.button} onPress={() => onEdit(item.id)}>
                <Text style={styles.buttonText}>Editar</Text>
              </TouchableOpacity>
              <TouchableOpacity
                style={[styles.button, styles.deleteButton]}
                onPress={() =>
                  Alert.alert(
                    'Confirmar',
                    'Â¿EstÃ¡s seguro de eliminar este producto/servicio?',
                    [
                      { text: 'Cancelar', style: 'cancel' },
                      {
                        text: 'Eliminar',
                        style: 'destructive',
                        onPress: () => onDelete(item.id),
                      },
                    ]
                  )
                }
              >
                <Text style={styles.buttonText}>Eliminar</Text>
              </TouchableOpacity>
            </View>
          </>
        )}
      </View>
    </TouchableOpacity>
  );
}

const styles = StyleSheet.create({
  itemContainer: {
    width: '100%',
    backgroundColor: '#E2E2FA',
    borderRadius: 10,
    padding: 15,
    marginBottom: 15,
  },
  headerRow: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
  },
  itemDescription: {
    fontSize: 18,
    fontWeight: 'bold',
    flexShrink: 1,
  },
  itemDetail: {
    fontSize: 16,
    marginTop: 5,
  },
  buttonContainer: {
    width: '100%',
    flexDirection: 'row',
    marginTop: 10,
  },
  button: {
    flex: 1,
    backgroundColor: '#007BFF',
    padding: 15,
    borderRadius: 5,
    marginRight: 10,
    alignItems: 'center',
  },
  deleteButton: {
    backgroundColor: '#FF3333',
    marginRight: 0,
  },
  buttonText: {
    color: '#fff',
    fontWeight: 'bold',
  },
});

---
Folder: C:\Users\porma\Desktop\sisa.ui\app\products_services
File: ProductsServicesList.js
Content:
// app/products_services/ProductsServicesList.js
import React, { useEffect, useState } from 'react';
import {
  View,
  Text,
  FlatList,
  StyleSheet,
  Alert,
  ActivityIndicator,
  Platform,
  UIManager,
  LayoutAnimation,
  TextInput,
} from 'react-native';
import AsyncStorage from '@react-native-async-storage/async-storage';
import { useRouter } from 'expo-router';
import Fuse from 'fuse.js';
import { BASE_URL } from '../../src/config/index';
import ProductServiceItem from './ProductServiceItem';

export default function ProductsServicesList() {
  const router = useRouter();
  const [productsServices, setProductsServices] = useState([]);
  const [filteredProductsServices, setFilteredProductsServices] = useState([]);
  const [loading, setLoading] = useState(true);
  const [searchQuery, setSearchQuery] = useState('');
  const [expandedItemId, setExpandedItemId] = useState(null);

  // Activar animaciones en Android
  useEffect(() => {
    if (Platform.OS === 'android' && UIManager.setLayoutAnimationEnabledExperimental) {
      UIManager.setLayoutAnimationEnabledExperimental(true);
    }
  }, []);

  const loadProductsServices = async () => {
    setLoading(true);
    const token = await AsyncStorage.getItem('token');
    if (!token) {
      setLoading(false);
      return;
    }
    try {
      const response = await fetch(`${BASE_URL}/products_services`, {
        headers: { Authorization: `Bearer ${token}` },
      });
      if (response.ok) {
        const data = await response.json();
        const allProductsServices = data.products_services || data;
        setProductsServices(allProductsServices);
        setFilteredProductsServices(allProductsServices);
      } else {
        Alert.alert('Error', 'No se pudieron obtener los productos/servicios');
      }
    } catch (error) {
      Alert.alert('Error', error.message);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    loadProductsServices();
  }, []);

  useEffect(() => {
    if (searchQuery.trim() === '') {
      setFilteredProductsServices(productsServices);
      return;
    }
    const options = {
      keys: ['description', 'category'],
      threshold: 0.4,
      includeScore: true,
    };
    const fuse = new Fuse(productsServices, options);
    const results = fuse.search(searchQuery);
    setFilteredProductsServices(results.map(result => result.item));
  }, [searchQuery, productsServices]);

  const handleDelete = async (productServiceId) => {
    const token = await AsyncStorage.getItem('token');
    if (!token) return;
    try {
      const response = await fetch(`${BASE_URL}/products_services/${productServiceId}`, {
        method: 'DELETE',
        headers: { Authorization: `Bearer ${token}` },
      });
      if (response.ok) {
        Alert.alert('Producto/Servicio eliminado');
        loadProductsServices();
        if (expandedItemId === productServiceId) {
          setExpandedItemId(null);
        }
      } else {
        const errData = await response.json();
        Alert.alert('Error', errData.error || 'Error eliminando el producto/servicio');
      }
    } catch (error) {
      Alert.alert('Error', error.message);
    }
  };

  const handleEdit = (productServiceId) => {
    router.push(`./EditProductService?id=${productServiceId}`);
  };

  const handleToggle = (productServiceId) => {
    if (Platform.OS !== 'web' && LayoutAnimation && LayoutAnimation.configureNext) {
      LayoutAnimation.configureNext(LayoutAnimation.Presets.easeInEaseOut);
    }
    setExpandedItemId(prev => (prev === productServiceId ? null : productServiceId));
  };

  return (
    <View style={styles.container}>
      <TextInput
        style={styles.searchInput}
        placeholder="Buscar por descripciÃ³n o categorÃ­a..."
        value={searchQuery}
        onChangeText={setSearchQuery}
      />
      {loading ? (
        <ActivityIndicator size="large" color="#007BFF" style={styles.loader} />
      ) : (
        <FlatList
          data={filteredProductsServices}
          keyExtractor={(item) => item.id.toString()}
          renderItem={({ item }) => (
            <ProductServiceItem
              item={item}
              expanded={expandedItemId === item.id}
              onToggle={handleToggle}
              onDelete={handleDelete}
              onEdit={handleEdit}
            />
          )}
          contentContainerStyle={styles.listContainer}
          ListEmptyComponent={<Text>No hay productos/servicios disponibles.</Text>}
        />
      )}
    </View>
  );
}

const styles = StyleSheet.create({
  container: { 
    flex: 1, 
    width: '100%',
    backgroundColor: '#fff',
    padding: 20,
  },
  searchInput: {
    height: 40,
    borderWidth: 1,
    borderColor: '#ccc',
    borderRadius: 8,
    paddingHorizontal: 10,
  },
  listContainer: { 
    marginTop: 20,
  },
  loader: { 
    marginTop: 20,
  },
});

---
Folder: C:\Users\porma\Desktop\sisa.ui\app\products_services
File: ProductsServicesScreen.js
Content:
// app/products_services/ProductsServicesScreen.js
import React from 'react';
import { View, Text, TouchableOpacity, StyleSheet } from 'react-native';
import { useRouter } from 'expo-router';
import ProductsServicesList from './ProductsServicesList';

export default function ProductsServicesScreen() {
  const router = useRouter();

  const handleAddProductService = () => {
    router.push('./AddProductService');
  };

  return (
    <View style={styles.container}>
      <Text style={styles.title}>Productos / Servicios</Text>
      <ProductsServicesList />
      <TouchableOpacity style={styles.floatingButton} onPress={handleAddProductService}>
        <Text style={styles.floatingButtonText}>+</Text>
      </TouchableOpacity>
    </View>
  );
}

const styles = StyleSheet.create({
  container: { 
    flex: 1, 
    backgroundColor: '#fff',
    padding: 20 
  },
  title: { 
    fontSize: 24, 
    fontWeight: 'bold', 
    marginBottom: 10,
    textAlign: 'center'
  },
  floatingButton: {
    position: 'absolute',
    bottom: 20,
    right: 20,
    backgroundColor: '#007BFF',
    width: 60,
    height: 60,
    borderRadius: 30,
    alignItems: 'center',
    justifyContent: 'center',
    elevation: 5,
    shadowColor: '#000',
    shadowOpacity: 0.3,
    shadowOffset: { width: 0, height: 2 },
    shadowRadius: 2,
  },
  floatingButtonText: {
    fontSize: 30,
    color: '#fff',
    marginTop: -4,
  },
});

---
Folder: C:\Users\porma\Desktop\sisa.ui\src\components
File: CameraImagePicker.ts
Content:
// sisa/app/utils/imageUtils.ts

import * as ImagePicker from 'expo-image-picker';
import * as ImageManipulator from 'expo-image-manipulator';
import * as FileSystem from 'expo-file-system';
import { Alert } from 'react-native';
import { BASE_URL, MAX_FILE_SIZE } from '../config/index';

/**
 * Solicita permisos para cÃ¡mara o galerÃ­a, abre la fuente de imagen
 * y retorna el objeto resultante de ImagePicker.
 * Se han agregado opciones para optimizar el uso de memoria y evitar reinicios.
 */
export async function pickImageFromSource(fromCamera: boolean) {
  try {
    if (fromCamera) {
      const { status } = await ImagePicker.requestCameraPermissionsAsync();
      if (status !== 'granted') {
        Alert.alert('Permiso denegado', 'Se requieren permisos de cÃ¡mara.');
        return null;
      }
      return await ImagePicker.launchCameraAsync({
        quality: 0.7,
        allowsEditing: false,
        exif: false,
        mediaTypes: ImagePicker.MediaTypeOptions.Images,
      });
    } else {
      const { status } = await ImagePicker.requestMediaLibraryPermissionsAsync();
      if (status !== 'granted') {
        Alert.alert('Permiso denegado', 'Se requieren permisos de galerÃ­a.');
        return null;
      }
      return await ImagePicker.launchImageLibraryAsync({
        quality: 0.7,
        allowsEditing: false,
        exif: false,
        mediaTypes: ImagePicker.MediaTypeOptions.Images,
      });
    }
  } catch (error: any) {
    Alert.alert('Error', error.message);
    return null;
  }
}

/**
 * Verifica y comprime/redimensiona la imagen hasta que su tamaÃ±o sea <= MAX_FILE_SIZE (1MB).
 * Realiza hasta 3 intentos reduciendo gradualmente el tamaÃ±o y la compresiÃ³n.
 * Retorna el URI final de la imagen procesada.
 */
async function ensureUnderMaxSize(
  uri: string,
  originalWidth: number,
  originalHeight: number
): Promise<string> {
  let currentUri = uri;
  let width = originalWidth;
  let height = originalHeight;

  const maxPasses = 3;
  let compressQuality = 0.7;

  for (let attempt = 1; attempt <= maxPasses; attempt++) {
    const fileInfo = await FileSystem.getInfoAsync(currentUri);
    if (!fileInfo.exists || typeof fileInfo.size !== 'number') {
      return currentUri;
    }
    if (fileInfo.size <= MAX_FILE_SIZE) {
      return currentUri;
    }
    // Calcula el ratio para acercarse al lÃ­mite
    const ratio = Math.sqrt(MAX_FILE_SIZE / fileInfo.size);
    const newWidth = Math.floor(width * Math.min(ratio, 0.9));
    const newHeight = Math.floor(height * Math.min(ratio, 0.9));

    const manipResult = await ImageManipulator.manipulateAsync(
      currentUri,
      [{ resize: { width: newWidth, height: newHeight } }],
      {
        compress: compressQuality,
        format: ImageManipulator.SaveFormat.JPEG,
      }
    );

    currentUri = manipResult.uri;
    width = newWidth;
    height = newHeight;
    compressQuality = Math.max(compressQuality - 0.1, 0.3);
  }

  return currentUri;
}

/**
 * Flujo completo para:
 * 1. Elegir la imagen (cÃ¡mara/galerÃ­a)
 * 2. Asegurar que la imagen procesada estÃ© por debajo de 1MB
 * 3. Retornar el URI final de la imagen
 */
export async function pickAndProcessImage(fromCamera: boolean): Promise<string | null> {
  try {
    const result = await pickImageFromSource(fromCamera);
    // Verifica si el usuario cancelÃ³ la acciÃ³n
    if (!result || result.canceled === true || (result as any).cancelled === true) {
      return null;
    }
    // En versiones modernas, el resultado contiene un array en result.assets
    const asset = result.assets ? result.assets[0] : result;
    if (!asset || !asset.uri) {
      return null;
    }
    const finalUri = await ensureUnderMaxSize(asset.uri, asset.width, asset.height);
    return finalUri;
  } catch (error: any) {
    Alert.alert('Error al seleccionar imagen', error.message);
    return null;
  }
}

/**
 * Sube la imagen (finalUri) al servidor usando multipart/form-data y retorna el file_id devuelto.
 */
export async function uploadImage(localUri: string, token: string): Promise<number | null> {
  try {
    let filename = localUri.split('/').pop() || 'photo.jpg';
    if (!/\.\w+$/.test(filename)) {
      filename = `${filename}.jpg`;
    }
    const match = /\.(\w+)$/.exec(filename);
    const type = match
      ? `image/${match[1].toLowerCase() === 'jpg' ? 'jpeg' : match[1].toLowerCase()}`
      : 'image/jpeg';

    const formData = new FormData();
    formData.append('file', {
      uri: localUri,
      name: filename,
      type,
    } as any);

    const uploadResponse = await fetch(`${BASE_URL}/upload`, {
      method: 'POST',
      headers: {
        Authorization: `Bearer ${token}`,
      },
      body: formData,
    });

    if (!uploadResponse.ok) {
      Alert.alert('Error', 'Error al subir archivo');
      return null;
    }

    const data = await uploadResponse.json();
    const fileId = data?.file?.id;
    return fileId || null;
  } catch (error: any) {
    Alert.alert('Error', error.message);
    return null;
  }
}

---
Folder: C:\Users\porma\Desktop\sisa.ui\src\components
File: CircleImagePicker.js
Content:
// app/components/CircleImagePicker.js
import React, { useState, useEffect } from 'react';
import { 
  View,
  TouchableOpacity,
  StyleSheet,
  Alert,
  Image,
  ActivityIndicator,
  Text
} from 'react-native';
import AsyncStorage from '@react-native-async-storage/async-storage';
import { pickAndProcessImage, uploadImage } from '../utils/imageUtils';
import { BASE_URL } from '../config/index';

/**
 * Componente para mostrar la imagen en un cÃ­rculo. Puede ser:
 * - SÃ³lo lectura (editable={false}), sin botÃ³n de cÃ¡mara.
 * - Editable (editable={true}), con botÃ³n de cÃ¡mara para cambiar la imagen.
 * 
 * Props:
 *  - fileId    : (opcional) ID de archivo en el servidor. Se descargarÃ¡ la imagen de /get_file?file_id=xxx
 *  - imageUri  : (opcional) URI local (o remota) a usar directamente.
 *  - editable  : boolean que indica si se muestra el icono de cÃ¡mara.
 *  - onImageChange(newFileId) : callback cuando se sube con Ã©xito una imagen y se obtiene un nuevo fileId.
 *  - size      : tamaÃ±o del cÃ­rculo (ancho/alto).
 */
export default function CircleImagePicker({
  fileId = null,
  imageUri = null,
  editable = false,
  size = 80,
  onImageChange,
  style,
}) {
  const [loading, setLoading] = useState(false);
  const [internalUri, setInternalUri] = useState(null);
  const [hasError, setHasError] = useState(false);

  useEffect(() => {
    if (imageUri) {
      // Usar directamente la URI pasada
      setInternalUri(imageUri);
      setHasError(false);
    } else if (fileId) {
      // Cargar la imagen desde el servidor
      loadFileFromServer(fileId);
    } else {
      // No hay imagen
      setInternalUri(null);
      setHasError(false);
    }
  }, [fileId, imageUri]);

  const loadFileFromServer = async (fId) => {
    try {
      setLoading(true);
      setHasError(false);
      const token = await AsyncStorage.getItem('token');
      if (!token) {
        setHasError(true);
        setLoading(false);
        return;
      }
      const response = await fetch(`${BASE_URL}/get_file?file_id=${fId}`, {
        headers: { Authorization: `Bearer ${token}` },
      });
      if (response.ok) {
        const blob = await response.blob();
        const reader = new FileReader();
        reader.onloadend = () => {
          setInternalUri(reader.result);
          setLoading(false);
        };
        reader.readAsDataURL(blob);
      } else {
        setHasError(true);
        setLoading(false);
      }
    } catch (error) {
      setHasError(true);
      setLoading(false);
    }
  };

  // Abre cÃ¡mara o galerÃ­a, sube la imagen
  const handleSelectImage = () => {
    Alert.alert(
      'Seleccionar Imagen',
      'Â¿Deseas usar la cÃ¡mara o la galerÃ­a?',
      [
        { text: 'CÃ¡mara', onPress: () => pickAndUpload(true) },
        { text: 'GalerÃ­a', onPress: () => pickAndUpload(false) },
        { text: 'Cancelar', style: 'cancel' },
      ],
      { cancelable: true }
    );
  };

  const pickAndUpload = async (fromCamera) => {
    try {
      setLoading(true);
      const newUri = await pickAndProcessImage(fromCamera);
      if (!newUri) {
        // Usuario cancelÃ³
        setLoading(false);
        return;
      }
      const token = await AsyncStorage.getItem('token');
      if (!token) {
        Alert.alert('Error', 'No se encontrÃ³ token');
        setLoading(false);
        return;
      }

      // Subir la imagen
      const newFileId = await uploadImage(newUri, token);
      if (newFileId) {
        setInternalUri(newUri);
        setHasError(false);
        if (onImageChange) {
          onImageChange(newFileId);
        }
      } else {
        Alert.alert('Error', 'No se pudo subir la imagen');
      }
    } catch (err) {
      Alert.alert('Error', err.message);
    } finally {
      setLoading(false);
    }
  };

  // Aplicar el tamaÃ±o (width/height) dinÃ¡micamente
  const circleStyle = {
    width: size,
    height: size,
    borderRadius: size / 2,
  };

  return (
    <View style={[styles.container, style, circleStyle]}>
      {loading && (
        <View style={styles.loadingOverlay}>
          <ActivityIndicator color="#fff" size="large" />
        </View>
      )}

      {/* Mostrar la imagen si tenemos URI, o un placeholder azul */}
      {internalUri && !hasError ? (
        <Image
          source={{ uri: internalUri }}
          style={[styles.image, { width: size, height: size, borderRadius: size / 2 }, loading && { opacity: 0.4 }]}
        />
      ) : (
        <View style={[styles.image, styles.placeholder, circleStyle]} />
      )}

      {/* BotÃ³n de cÃ¡mara si es editable */}
      {editable && !loading && (
        <TouchableOpacity style={styles.cameraButton} onPress={handleSelectImage}>
          <Text style={styles.cameraIcon}>ðŸ“·</Text>
        </TouchableOpacity>
      )}
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    alignSelf: 'center',
    position: 'relative',
    justifyContent: 'center',
    alignItems: 'center',
  },
  loadingOverlay: {
    position: 'absolute',
    zIndex: 2,
  },
  image: {
    resizeMode: 'cover',
  },
  placeholder: {
    backgroundColor: 'blue',
  },
  cameraButton: {
    position: 'absolute',
    right: 0,
    bottom: 0,
    width: '30%',
    height: '30%',
    backgroundColor: 'rgba(0,0,0,0.5)',
    borderRadius: '50%',
    alignItems: 'center',
    justifyContent: 'center',
    zIndex: 3,
  },
  cameraIcon: {
    color: '#fff',
    fontSize: 32,
  },
});

---
Folder: C:\Users\porma\Desktop\sisa.ui\src\components
File: FolderList.js
Content:
// src/components/FolderList.js
import React, { useState } from 'react';
import { View, Text, FlatList, StyleSheet, Alert, ActivityIndicator, Button } from 'react-native';
import { deleteFolder, editFolder } from '../services/folderService';
import { useFolders } from '../hooks/useFolders';

export default function FolderList({ onEditFolder }) {
  const { folders, loading, error, reload } = useFolders();
  const [editingFolderId, setEditingFolderId] = useState(null);

  const handleDelete = async (folderId) => {
    try {
      await deleteFolder(folderId);
      Alert.alert('Folder deleted successfully');
      reload();
    } catch (err) {
      Alert.alert('Error', err.message);
    }
  };

  const handleEdit = async (folderId, newFolderData) => {
    try {
      const updatedFolder = await editFolder(folderId, newFolderData);
      Alert.alert('Folder updated successfully');
      // Propagar la acciÃ³n o actualizar localmente segÃºn sea necesario
      if (onEditFolder) onEditFolder(updatedFolder);
      reload();
    } catch (err) {
      Alert.alert('Error', err.message);
    }
  };

  const renderFolder = ({ item }) => (
    <View style={styles.folderContainer}>
      <Text style={styles.folderName}>{item.name}</Text>
      <View style={styles.buttonsContainer}>
        <Button title="Edit" onPress={() => setEditingFolderId(item.id)} />
        <Button title="Delete" onPress={() => handleDelete(item.id)} />
      </View>
      {editingFolderId === item.id && (
        // AquÃ­ podrÃ­as mostrar un formulario o modal para editar la carpeta
        // Por simplicidad, se muestra un ejemplo de ediciÃ³n directa
        <View style={styles.editContainer}>
          <Text>Edit folder: {item.name}</Text>
          {/* Implementar el formulario y llamar a handleEdit cuando se confirme */}
        </View>
      )}
    </View>
  );

  if (loading) return <ActivityIndicator size="large" color="#007BFF" style={styles.loader} />;
  if (error) return <Text style={styles.errorText}>{error}</Text>;
  if (folders.length === 0) return <Text>No folders available.</Text>;

  return (
    <FlatList
      data={folders}
      keyExtractor={(item) => item.id.toString()}
      renderItem={renderFolder}
      contentContainerStyle={styles.listContainer}
    />
  );
}

const styles = StyleSheet.create({
  listContainer: {
    padding: 10,
  },
  folderContainer: {
    padding: 15,
    borderWidth: 1,
    borderColor: '#ccc',
    borderRadius: 8,
    marginBottom: 10,
    backgroundColor: '#fff',
  },
  folderName: {
    fontSize: 16,
    fontWeight: 'bold',
  },
  buttonsContainer: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginTop: 10,
  },
  editContainer: {
    marginTop: 10,
    backgroundColor: '#f9f9f9',
    padding: 10,
    borderRadius: 8,
  },
  loader: {
    marginTop: 20,
  },
  errorText: {
    color: 'red',
    textAlign: 'center',
    marginTop: 20,
  },
});

---
Folder: C:\Users\porma\Desktop\sisa.ui\src\components
File: ImageDisplay.js
Content:
// ImageDisplay.js
import React from 'react';
import { View, Image, StyleSheet } from 'react-native';

const ImageDisplay = ({ imageUri, style }) => {
  if (imageUri) {
    return <Image source={{ uri: imageUri }} style={[styles.image, style]} />;
  }
  return <View style={[styles.image, styles.placeholder, style]} />;
};

const styles = StyleSheet.create({
  image: {
    width: 200,
    height: 200,
    borderRadius: 100,
    resizeMode: 'cover',
  },
  placeholder: {
    backgroundColor: 'blue',
  },
});

export default ImageDisplay;

---
Folder: C:\Users\porma\Desktop\sisa.ui\src\config
File: index.js
Content:
export const BASE_URL = 'https://sistema.depros.com.ar';
export const MAX_FILE_SIZE = 1 * 1024 * 1024; // 1 MB
---
Folder: C:\Users\porma\Desktop\sisa.ui\src\contexts
File: AppContext.js
Content:
// AppContext.js
import React, { createContext } from 'react';
import { BASE_URL } from '../config/index';

export const AppContext = createContext({
  baseUrl: BASE_URL,
});

export const AppProvider = ({ children }) => {
  const contextValue = { baseUrl: BASE_URL };

  return (
    <AppContext.Provider value={contextValue}>
      {children}
    </AppContext.Provider>
  );
};

---
Folder: C:\Users\porma\Desktop\sisa.ui\src\contexts
File: UserContext.js
Content:
// UserContext.js
import React, { createContext, useState } from 'react';

// Creamos el contexto con un valor inicial null
export const UserContext = createContext(null);

// Creamos el proveedor para envolver la aplicaciÃ³n
export const UserProvider = ({ children }) => {
  const [user, setUser] = useState({
    id: 1,
    username: 'john_doe',
    email: 'john@example.com',
  });

  return (
    <UserContext.Provider value={{ user, setUser }}>
      {children}
    </UserContext.Provider>
  );
};

---
Folder: C:\Users\porma\Desktop\sisa.ui\src\database
File: clientsLocalDB.js
Content:
import * as SQLite from 'expo-sqlite';
import AsyncStorage from '@react-native-async-storage/async-storage';
import { BASE_URL } from '../config/index';
import { logErrorToLocal } from './errorLogger';

// Se abre la base de datos local
const db = SQLite.openDatabaseSync('mydatabase.db');

/**
 * Crea la tabla "clients" si no existe.
 */
export async function createLocalClientsTable() {
  try {
    await db.execAsync(`
      PRAGMA journal_mode = WAL;
      CREATE TABLE IF NOT EXISTS clients (
        id INTEGER PRIMARY KEY NOT NULL,
        business_name TEXT NOT NULL,
        tax_id TEXT,
        email TEXT,
        brand_file_id INTEGER,
        phone TEXT,
        address TEXT
      );
    `);
  } catch (error) {
    await logErrorToLocal(error);
  }
}

/**
 * Inserta un cliente en la BD local.
 * @param {Object} clientData - Datos del cliente.
 * @returns {number} - El id insertado.
 */
export async function insertClientLocal(clientData) {
  const { business_name, tax_id, email, brand_file_id, phone, address } = clientData;
  try {
    const result = await db.runAsync(
      `INSERT INTO clients (business_name, tax_id, email, brand_file_id, phone, address)
       VALUES (?, ?, ?, ?, ?, ?);`,
      business_name,
      tax_id,
      email,
      brand_file_id,
      phone,
      address
    );
    return result.lastInsertRowId;
  } catch (error) {
    await logErrorToLocal(error);
    throw error;
  }
}

/**
 * Retorna todos los clientes de la BD local.
 * @returns {Array} - Lista de clientes.
 */
export async function getAllClientsLocal() {
  try {
    const result = await db.getAllAsync('SELECT * FROM clients;');
    return result;
  } catch (error) {
    await logErrorToLocal(error);
    return [];
  }
}

/**
 * Elimina un cliente local por su id.
 * @param {number} clientId - Id del cliente a eliminar.
 * @returns {number} - Cantidad de filas afectadas.
 */
export async function deleteClientLocal(clientId) {
  try {
    const result = await db.runAsync('DELETE FROM clients WHERE id = ?;', clientId);
    return result.changes;
  } catch (error) {
    await logErrorToLocal(error);
    return 0;
  }
}

/**
 * Borra todos los clientes de la BD local.
 */
async function clearLocalClients() {
  try {
    await db.execAsync('DELETE FROM clients;');
  } catch (error) {
    await logErrorToLocal(error);
  }
}

/**
 * Sincroniza la BD local con los datos del servidor.
 * Si el servidor devuelve datos, se actualiza la BD local.
 * En caso de error, se registra en el log interno.
 */
export async function syncFromServer() {
  try {
    const token = await AsyncStorage.getItem('token');
    if (!token) return;
  
    const response = await fetch(`${BASE_URL}/clients`, {
      headers: { Authorization: `Bearer ${token}` },
    });
  
    if (!response.ok) {
      const error = new Error(`Error fetching clients: ${response.status}`);
      await logErrorToLocal(error);
      return;
    }
  
    const data = await response.json();
    const serverClients = data.clients || [];
  
    // Si el servidor devuelve datos, se procede a actualizar la BD local.
    if (serverClients.length > 0) {
      await clearLocalClients();
      // Asegurarse de que la tabla existe
      await createLocalClientsTable();
  
      for (let c of serverClients) {
        await insertClientLocal({
          business_name: c.business_name,
          tax_id: c.tax_id,
          email: c.email,
          brand_file_id: c.brand_file_id,
          phone: c.phone,
          address: c.address,
        });
      }
    } else {
      // Si el servidor no devuelve clientes, se registra el hecho.
      await logErrorToLocal(new Error('Server returned empty client list'));
    }
  } catch (error) {
    await logErrorToLocal(error);
  }
}

---
Folder: C:\Users\porma\Desktop\sisa.ui\src\database
File: errorLogger.js
Content:
// src/database/errorLogger.js
import * as SQLite from 'expo-sqlite';

// Se abre (o crea) la base de datos local
const db = SQLite.openDatabaseSync('mydatabase.db');

/**
 * Crea la tabla de logs de errores (error_logs) si no existe.
 */
export async function createErrorLogTable() {
  try {
    await db.execAsync(`
      CREATE TABLE IF NOT EXISTS error_logs (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        error_message TEXT,
        error_stack TEXT,
        timestamp TEXT
      );
    `);
  } catch (error) {
    console.error('Error creating error_logs table:', error);
  }
}

/**
 * Registra un error en la tabla error_logs.
 * @param {Error} error - Objeto de error a registrar.
 */
export async function logErrorToLocal(error) {
  try {
    await createErrorLogTable();
    const timestamp = new Date().toISOString();
    const errorMessage = error.message || 'Unknown error';
    const errorStack = error.stack || '';
    await db.runAsync(
      `INSERT INTO error_logs (error_message, error_stack, timestamp)
       VALUES (?, ?, ?);`,
      errorMessage,
      errorStack,
      timestamp
    );
  } catch (loggingError) {
    console.error('Error logging error to local DB:', loggingError);
  }
}

/**
 * Obtiene todos los registros de error_logs ordenados por id descendente.
 */
export async function getErrorLogs() {
  try {
    await createErrorLogTable();
    const result = await db.getAllAsync("SELECT * FROM error_logs ORDER BY id DESC;");
    return result;
  } catch (error) {
    console.error("Error fetching error logs:", error);
    return [];
  }
}

/**
 * Elimina todos los registros de error_logs.
 */
export async function clearErrorLogs() {
  try {
    await createErrorLogTable();
    await db.execAsync("DELETE FROM error_logs;");
  } catch (error) {
    console.error("Error clearing error logs:", error);
  }
}

---
Folder: C:\Users\porma\Desktop\sisa.ui\src\services
File: FolderResource.js
Content:
/**
 * FolderResource.js
 *
 * Este recurso administra un Ã¡rbol de carpetas en memoria.
 * Exporta funciones para:
 *  - getFolderTree(): obtener el Ã¡rbol completo de carpetas.
 *  - addFolder(newFolderData, parentId): agregar una carpeta nueva.
 *  - updateFolder(folderId, updatedData): modificar una carpeta existente.
 *  - deleteFolder(folderId): eliminar una carpeta.
 *
 * Las carpetas se organizan de forma jerÃ¡rquica: cada carpeta tiene un id, un nombre,
 * un parentId (null si es de raÃ­z) y un array de children.
 */

// Ã�rbol de carpetas de ejemplo
const folderTree = [
    {
      id: '1',
      name: 'Documents',
      parentId: null,
      children: [
        { id: '11', name: 'Work Documents', parentId: '1', children: [] },
        { id: '12', name: 'Personal Documents', parentId: '1', children: [] },
      ],
    },
    {
      id: '2',
      name: 'Photos',
      parentId: null,
      children: [
        { id: '21', name: 'Vacations', parentId: '2', children: [] },
        { id: '22', name: 'Family', parentId: '2', children: [] },
      ],
    },
    {
      id: '3',
      name: 'Music',
      parentId: null,
      children: [],
    },
  ];
  
  /**
   * Retorna el Ã¡rbol completo de carpetas.
   */
  function getFolderTree() {
    return folderTree;
  }
  
  /**
   * Agrega una carpeta nueva.
   * @param {Object} newFolderData - Objeto con al menos la propiedad "name".
   * @param {string|null} parentId - Id de la carpeta padre; si es null se agrega a raÃ­z.
   * @returns {Object} La carpeta agregada.
   */
  function addFolder(newFolderData, parentId = null) {
    const newFolder = {
      id: Date.now().toString(), // Se usa el timestamp como id Ãºnico
      name: newFolderData.name,
      parentId: parentId,
      children: [],
    };
  
    if (parentId === null) {
      folderTree.push(newFolder);
    } else {
      const parentFolder = findFolderById(folderTree, parentId);
      if (!parentFolder) {
        throw new Error('Parent folder not found');
      }
      parentFolder.children.push(newFolder);
    }
    return newFolder;
  }
  
  /**
   * Actualiza una carpeta existente.
   * @param {string} folderId - Id de la carpeta a actualizar.
   * @param {Object} updatedData - Objeto con los campos a actualizar (por ejemplo, name).
   * @returns {Object} La carpeta actualizada.
   */
  function updateFolder(folderId, updatedData) {
    const folder = findFolderById(folderTree, folderId);
    if (!folder) {
      throw new Error('Folder not found');
    }
    // Actualiza los campos; en este ejemplo se actualiza el nombre.
    folder.name = updatedData.name || folder.name;
    // Puedes agregar mÃ¡s actualizaciones si fuera necesario.
    return folder;
  }
  
  /**
   * Elimina una carpeta del Ã¡rbol.
   * @param {string} folderId - Id de la carpeta a eliminar.
   * @returns {boolean} true si se eliminÃ³ la carpeta; de lo contrario se lanza un error.
   */
  function deleteFolder(folderId) {
    const success = deleteFolderRecursive(folderTree, folderId);
    if (!success) {
      throw new Error('Folder not found');
    }
    return true;
  }
  
  /* Funciones auxiliares */
  
  /**
   * Busca una carpeta por id de forma recursiva.
   * @param {Array} folders - Array de carpetas.
   * @param {string} id - Id a buscar.
   * @returns {Object|null} La carpeta encontrada o null.
   */
  function findFolderById(folders, id) {
    for (const folder of folders) {
      if (folder.id === id) {
        return folder;
      }
      if (folder.children && folder.children.length > 0) {
        const found = findFolderById(folder.children, id);
        if (found) return found;
      }
    }
    return null;
  }
  
  /**
   * Elimina una carpeta (y sus subcarpetas) de un array de carpetas de forma recursiva.
   * @param {Array} folders - Array de carpetas.
   * @param {string} id - Id de la carpeta a eliminar.
   * @returns {boolean} true si se eliminÃ³, false en caso contrario.
   */
  function deleteFolderRecursive(folders, id) {
    const index = folders.findIndex(folder => folder.id === id);
    if (index !== -1) {
      folders.splice(index, 1);
      return true;
    }
    for (const folder of folders) {
      if (folder.children && folder.children.length > 0) {
        const success = deleteFolderRecursive(folder.children, id);
        if (success) return true;
      }
    }
    return false;
  }
  
  export { getFolderTree, addFolder, updateFolder, deleteFolder };
  
---
Folder: C:\Users\porma\Desktop\sisa.ui\src\utils
File: imageUtils.ts
Content:
// sisa/app/utils/imageUtils.ts

import * as ImagePicker from 'expo-image-picker';
import * as ImageManipulator from 'expo-image-manipulator';
import * as FileSystem from 'expo-file-system';
import { Alert } from 'react-native';
import { BASE_URL, MAX_FILE_SIZE } from '../config/index';

/**
 * Solicita permisos para cÃ¡mara o galerÃ­a, abre la fuente de imagen
 * y retorna el objeto resultante de ImagePicker.
 * 
 * NOTA: Se omiten 'allowsEditing' y 'aspect' para evitar reinicios/crashes en algunos Android.
 *       Se reduce la calidad a 0.7 (70%) para no generar archivos muy grandes de inicio.
 */
export async function pickImageFromSource(fromCamera: boolean) {
  if (fromCamera) {
    const { status } = await ImagePicker.requestCameraPermissionsAsync();
    if (status !== 'granted') {
      Alert.alert('Permiso denegado', 'Se requieren permisos de cÃ¡mara.');
      return null;
    }
    return await ImagePicker.launchCameraAsync({
      quality: 0.7,
    });
  } else {
    const { status } = await ImagePicker.requestMediaLibraryPermissionsAsync();
    if (status !== 'granted') {
      Alert.alert('Permiso denegado', 'Se requieren permisos de galerÃ­a.');
      return null;
    }
    return await ImagePicker.launchImageLibraryAsync({
      quality: 0.7,
    });
  }
}

/**
 * Verifica y comprime/redimensiona la imagen HASTA que su tamaÃ±o sea <= MAX_FILE_SIZE (1MB).
 * Realiza varias "pasadas" reduciendo gradualmente el tamaÃ±o y la compresiÃ³n. 
 * Retorna el nuevo URI local de la imagen final bajo 1MB (o lo que defina MAX_FILE_SIZE).
 */
async function ensureUnderMaxSize(
  uri: string,
  originalWidth: number,
  originalHeight: number
): Promise<string> {
  let currentUri = uri;
  let width = originalWidth;
  let height = originalHeight;

  // Hasta 3 intentos para ir reduciendo
  const maxPasses = 3;
  // Empieza con una compresiÃ³n razonable
  let compressQuality = 0.7;

  for (let attempt = 1; attempt <= maxPasses; attempt++) {
    const fileInfo = await FileSystem.getInfoAsync(currentUri);
    if (!fileInfo.exists || typeof fileInfo.size !== 'number') {
      // Si algo falla, salimos sin forzar
      return currentUri;
    }
    if (fileInfo.size <= MAX_FILE_SIZE) {
      // Ya estamos por debajo (o igual) al lÃ­mite de 1MB
      return currentUri;
    }
    // Reducir dimensiones de forma aproximada para acercarnos a 1MB
    const ratio = Math.sqrt(MAX_FILE_SIZE / fileInfo.size);
    // Si ratio >= 1, significa que ya estamos "casi" sin necesidad de redimensionar
    // pero igual se comprime un poco mÃ¡s.
    const newWidth = Math.floor(width * Math.min(ratio, 0.9));
    const newHeight = Math.floor(height * Math.min(ratio, 0.9));

    // Procesar con ImageManipulator
    const manipResult = await ImageManipulator.manipulateAsync(
      currentUri,
      [{ resize: { width: newWidth, height: newHeight } }],
      {
        compress: compressQuality,
        format: ImageManipulator.SaveFormat.JPEG,
      }
    );

    currentUri = manipResult.uri;
    width = newWidth;
    height = newHeight;

    // Cada pasada bajamos mÃ¡s la compresiÃ³n
    compressQuality -= 0.1;
    if (compressQuality < 0.3) {
      compressQuality = 0.3;
    }
  }

  // DespuÃ©s de los intentos, devolvemos el resultado (aunque quizÃ¡s siga arriba de 1MB si la imagen era enorme)
  return currentUri;
}

/**
 * El flujo completo de:
 *  1. Elegir la imagen (cÃ¡mara/galerÃ­a)
 *  2. Asegurar que quede por debajo de 1MB (ensureUnderMaxSize)
 *  3. Retornar el URI local final de la imagen procesada
 */
export async function pickAndProcessImage(fromCamera: boolean): Promise<string | null> {
  const result = await pickImageFromSource(fromCamera);
  // Verificamos si el usuario cancelÃ³
  if (!result || result.canceled === true || (result as any).cancelled === true) {
    return null;
  }
  // En SDKs modernos, result.assets es un array con los datos de la imagen
  const asset = result.assets ? result.assets[0] : result;
  if (!asset || !asset.uri) {
    return null;
  }
  // Llamamos a ensureUnderMaxSize para que el archivo no supere 1MB
  const finalUri = await ensureUnderMaxSize(asset.uri, asset.width, asset.height);
  return finalUri;
}

/**
 * Sube la imagen (finalUri) al servidor con multipart/form-data
 * y retorna el file_id devuelto por la API.
 */
export async function uploadImage(localUri: string, token: string): Promise<number | null> {
  try {
    let filename = localUri.split('/').pop() || 'photo.jpg';
    if (!/\.\w+$/.test(filename)) {
      filename = `${filename}.jpg`;
    }
    const match = /\.(\w+)$/.exec(filename);
    // Forzamos 'jpeg' si la extensiÃ³n es '.jpg'
    const type = match
      ? `image/${match[1].toLowerCase() === 'jpg' ? 'jpeg' : match[1].toLowerCase()}`
      : 'image/jpeg';

    const formData = new FormData();
    formData.append('file', {
      uri: localUri,
      name: filename,
      type,
    } as any);

    const uploadResponse = await fetch(`${BASE_URL}/upload`, {
      method: 'POST',
      headers: {
        Authorization: `Bearer ${token}`,
      },
      body: formData,
    });

    if (!uploadResponse.ok) {
      Alert.alert('Error', 'Error al subir archivo');
      return null;
    }

    const data = await uploadResponse.json();
    const fileId = data?.file?.id;
    return fileId || null;
  } catch (error: any) {
    Alert.alert('Error', error.message);
    return null;
  }
}

---
